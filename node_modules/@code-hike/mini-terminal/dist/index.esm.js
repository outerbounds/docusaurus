import React from 'react';
import { MiniFrame } from '@code-hike/mini-frame';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function getCommands(text) {
    var _a = __read(text.split(/^\$\s*/gm)), lines = _a.slice(1);
    var commands = lines.map(function (c) {
        var _a = __read(c.split(/\r?\n/)), run = _a[0], outputLines = _a.slice(1);
        return {
            run: run,
            output: outputLines.length > 0 ? outputLines.join("\n") : null,
        };
    });
    var lastCommand = commands[commands.length - 1];
    var isRunning = commands.length > 0 && lastCommand.output != null;
    var title = isRunning ? lastCommand.run.split(/(\s+)/)[0] : "bash";
    return {
        title: title,
        isRunning: isRunning,
        commands: commands,
    };
}

var prompt = React.createElement("span", { className: "ch-terminal-prompt" }, "$");
function TerminalContent(_a) {
    var text = _a.text, _b = _a.progress, progress = _b === void 0 ? 1 : _b, style = _a.style;
    var commands = parse(text, progress);
    return (React.createElement("pre", { style: style, className: "ch-terminal-content" }, commands.map(function (_a, i) {
        var run = _a.run, output = _a.output;
        return (React.createElement(React.Fragment, { key: i },
            React.createElement("div", null,
                prompt,
                " ",
                React.createElement("span", null, run)),
            output && (React.createElement("div", { className: "ch-terminal-output" }, output))));
    })));
}
function parse(text, progress) {
    if (!text)
        return [];
    var chars = Math.round(text.length * progress);
    var commands = getCommands(text.slice(0, chars)).commands;
    return commands;
}

function MiniTerminalTransition(_a) {
    var _b = _a.title, title = _b === void 0 ? "bash" : _b, prev = _a.prev, prevKey = _a.prevKey, next = _a.next, nextKey = _a.nextKey, progress = _a.progress, _c = _a.className, className = _c === void 0 ? "" : _c, rest = __rest(_a, ["title", "prev", "prevKey", "next", "nextKey", "progress", "className"]);
    return (React.createElement(MiniFrame, __assign({ title: title }, rest, { className: "ch-terminal-container " + className, theme: {} }),
        React.createElement(InnerTerminalTransition, __assign({}, { prev: prev, prevKey: prevKey, next: next, nextKey: nextKey, progress: progress }))));
}
function InnerTerminalTransition(_a) {
    var _b = _a.prev, prev = _b === void 0 ? "" : _b, prevKey = _a.prevKey, _c = _a.next, next = _c === void 0 ? "" : _c, nextKey = _a.nextKey, progress = _a.progress;
    return (React.createElement("div", { className: "ch-terminal" },
        React.createElement("div", { style: {
                position: "relative",
                transform: "translateY(-" + progress * 100 + "%)",
            } },
            React.createElement(TerminalContent, { text: prev, progress: 1, key: prevKey }),
            React.createElement(TerminalContent, { style: { position: "absolute" }, text: next, progress: progress, key: nextKey }))));
}

function MiniTerminalTransitions(_a) {
    var _b = _a.title, title = _b === void 0 ? "bash" : _b, steps = _a.steps, progress = _a.progress; _a.backward; var rest = __rest(_a, ["title", "steps", "progress", "backward"]);
    var textSteps = steps.map(function (s) { return s.text; });
    var stepProgress = progress % 1;
    var prevIndex = clamp(Math.floor(progress), 0, textSteps.length - 1);
    var nextIndex = prevIndex + 1;
    return (React.createElement(MiniTerminalTransition, __assign({ title: title, prev: textSteps[prevIndex], prevKey: prevIndex, next: textSteps[nextIndex] || "", nextKey: nextIndex, progress: stepProgress }, rest)));
}
function InnerTerminalTransitions(_a) {
    var steps = _a.steps, progress = _a.progress;
    var textSteps = steps.map(function (s) { return s.text; });
    var stepProgress = progress % 1;
    var prevIndex = clamp(Math.floor(progress), 0, steps.length - 1);
    var nextIndex = prevIndex + 1;
    return (React.createElement(InnerTerminalTransition, { prev: textSteps[prevIndex], prevKey: prevIndex, next: textSteps[nextIndex] || "", nextKey: nextIndex, progress: stepProgress }));
}
function clamp(x, min, max) {
    return Math.min(Math.max(x, min), max);
}

function MiniTerminal(_a) {
    var text = _a.text, _b = _a.title, title = _b === void 0 ? "bash" : _b, _c = _a.progress, progress = _c === void 0 ? 0 : _c, _d = _a.backward, backward = _d === void 0 ? false : _d, steps = _a.steps, rest = __rest(_a, ["text", "title", "progress", "backward", "steps"]);
    var actualSteps = steps || [{ text: text || "" }];
    return (React.createElement(MiniTerminalTransitions, __assign({ steps: actualSteps, progress: progress, backward: backward, title: title }, rest)));
}

export { InnerTerminalTransitions as InnerTerminal, MiniTerminal, TerminalContent };
