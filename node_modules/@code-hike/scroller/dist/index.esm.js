import React from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function debugEntries(entries) {
    entries.forEach(showEntry);
}
function showEntry(entry) {
    var _a;
    var rootHeight = ((_a = entry.rootBounds) === null || _a === void 0 ? void 0 : _a.height) || 0;
    addFlashingRect(entry.rootBounds, {
        border: Math.min(10, rootHeight / 2) + "px solid " + iodOptions.rootColor,
        overflow: "hidden",
        boxSizing: "border-box",
    });
    addFlashingRect(entry.boundingClientRect, {
        border: Math.min(10, entry.boundingClientRect.height / 2) + "px solid " + (entry.isIntersecting
            ? iodOptions.enterColor
            : iodOptions.exitColor),
        overflow: "hidden",
        boxSizing: "border-box",
    });
    addFlashingRect(entry.intersectionRect, {
        backgroundColor: iodOptions.interColor,
        zIndex: 2,
    });
}
function addFlashingRect(bounds, style) {
    if (style === void 0) { style = {}; }
    var width = bounds.width, left = bounds.left, height = bounds.height, top = bounds.top;
    var div = document.createElement("div");
    div.style.position = "fixed";
    div.style.width = width + "px";
    div.style.left = left + "px";
    div.style.top = top + "px";
    div.style.height = height + "px";
    div.style.pointerEvents = "none";
    div.style.transition = "opacity 2s ease-in";
    Object.assign(div.style, style);
    requestAnimationFrame(function () {
        return requestAnimationFrame(function () {
            div.style.opacity = "0";
        });
    });
    div.addEventListener("transitionend", function () {
        document.body.removeChild(div);
    });
    document.body.appendChild(div);
    return div;
}
var iodOptions = {
    rootColor: "#9428AB",
    enterColor: "#B35C00",
    exitColor: "#035570",
    interColor: "#9CAF00BB",
};

var useLayoutEffect$1 = typeof window !== "undefined"
    ? React.useLayoutEffect
    : React.useEffect;
function useWindowHeight() {
    var isClient = typeof window === "object";
    function getHeight() {
        return isClient
            ? document.documentElement.clientHeight
            : undefined;
    }
    var _a = __read(React.useState(getHeight), 2), windowHeight = _a[0], setWindowHeight = _a[1];
    React.useEffect(function () {
        function handleResize() {
            setWindowHeight(getHeight());
        }
        window.addEventListener("resize", handleResize);
        return function () {
            return window.removeEventListener("resize", handleResize);
        };
    }, []);
    useLayoutEffect$1(function () {
        // FIX when a horizontal scrollbar is added after the first layout
        setWindowHeight(getHeight());
    }, []);
    return windowHeight;
}

var ObserverContext = React.createContext(undefined);
var useLayoutEffect = typeof window !== "undefined"
    ? React.useLayoutEffect
    : React.useEffect;
function Scroller(_a) {
    var onStepChange = _a.onStepChange, children = _a.children, _b = _a.getRootMargin, getRootMargin = _b === void 0 ? defaultRootMargin : _b, _c = _a.debug, debug = _c === void 0 ? false : _c;
    var _d = __read(React.useState(), 2), observer = _d[0], setObserver = _d[1];
    var vh = useWindowHeight();
    useLayoutEffect(function () {
        var windowHeight = vh || 0;
        var handleIntersect = function (entries) {
            if (debug || window.chDebugScroller) {
                debugEntries(entries);
            }
            entries.forEach(function (entry) {
                if (entry.intersectionRatio > 0) {
                    var stepElement = entry.target;
                    onStepChange(+stepElement.stepIndex);
                }
            });
        };
        var observer = newIntersectionObserver(handleIntersect, getRootMargin(windowHeight));
        setObserver(observer);
        return function () { return observer.disconnect(); };
    }, [vh]);
    return (React.createElement(ObserverContext.Provider, { value: observer }, children));
}
function Step(_a) {
    var _b = _a.as, as = _b === void 0 ? "section" : _b, index = _a.index, props = __rest(_a, ["as", "index"]);
    var ref = React.useRef(null);
    var observer = React.useContext(ObserverContext);
    useLayoutEffect(function () {
        if (observer) {
            observer.observe(ref.current);
        }
        return function () { return observer && observer.unobserve(ref.current); };
    }, [observer]);
    useLayoutEffect(function () {
        var stepElement = ref.current;
        stepElement.stepIndex = index;
    }, [index]);
    return React.createElement(as, __assign(__assign({}, props), { ref: ref }));
}
function newIntersectionObserver(handleIntersect, rootMargin) {
    return new IntersectionObserver(handleIntersect, {
        rootMargin: rootMargin,
        threshold: 0.000001,
        root: null,
    });
}
function defaultRootMargin(vh) {
    return "-" + (vh / 2 - 2) + "px 0px";
}

export { Scroller, Step };
