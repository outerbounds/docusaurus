'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function map(tween, fn) {
    return {
        prev: fn(tween.prev, "prev"),
        next: fn(tween.next, "next"),
    };
}
function withDefault(t, deft) {
    return {
        prev: (t === null || t === void 0 ? void 0 : t.prev) === undefined ? deft : t.prev,
        next: (t === null || t === void 0 ? void 0 : t.next) === undefined ? deft : t.next,
    };
}
function mapWithDefault(tween, deft, fn) {
    return map(withDefault(tween, deft), fn);
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function mapFocusToLineNumbers(focus, lines) {
    if (!focus) {
        // focus all lines
        return mergeToObject(__spread(lines.keys()).map(function (lineIndex) {
            var _a;
            return (_a = {},
                _a[lineIndex + 1] = true,
                _a);
        }));
    }
    else {
        return mergeToObject(splitParts(focus).map(parsePartToObject));
    }
}
function splitParts(focus) {
    return focus.split(/,(?![^\[]*\])/g);
}
function mergeToObject(entries) {
    return entries.reduce(function (acc, obj) { return Object.assign(acc, obj); }, {});
}
function hasColumns(part) {
    return !!part.match(/(\d+)\[(.+)\]/);
}
function parsePartToObject(part) {
    var _a;
    // a part could be
    // - a line number: "2"
    // - a line range: "5:9"
    // - a line number with a column selector: "2[1,3:5,9]"
    var columnsMatch = part.match(/(\d+)\[(.+)\]/);
    if (columnsMatch) {
        var _b = __read(columnsMatch, 3), line = _b[1], columns = _b[2];
        var columnsList = columns
            .split(",")
            .map(parseExtremes);
        var lineNumber = Number(line);
        return _a = {}, _a[lineNumber] = columnsList, _a;
    }
    else {
        return mergeToObject(expandString(part).map(function (lineNumber) {
            var _a;
            return (_a = {},
                _a[lineNumber] = true,
                _a);
        }));
    }
}
function parseExtremes(part) {
    // Transforms something like
    // - "1:3" to {start:1, end: 3}
    // - "4" to {start:4, end:4}
    var _a = __read(part.split(":"), 2), start = _a[0], end = _a[1];
    if (!isNaturalNumber(start)) {
        throw new FocusNumberError(start);
    }
    var startNumber = Number(start);
    if (startNumber < 1) {
        throw new LineOrColumnNumberError();
    }
    if (!end) {
        return { start: startNumber, end: startNumber };
    }
    else {
        if (!isNaturalNumber(end)) {
            throw new FocusNumberError(end);
        }
        return { start: startNumber, end: +end };
    }
}
function getFocusIndexes(focus, lines) {
    if (!focus) {
        return __spread(lines.keys());
    }
    else {
        var parsed = parseFocus(focus);
        var focusedIndexes = Object.keys(parsed).map(function (i) {
            return parseInt(i, 10);
        });
        return focusedIndexes;
    }
}
function parseFocus(focus) {
    if (!focus) {
        throw new Error("Focus cannot be empty");
    }
    try {
        var parts = focus
            .split(/,(?![^\[]*\])/g)
            .map(parsePart);
        return fromEntries(parts.flat());
    }
    catch (error) {
        // TODO enhance error
        throw error;
    }
}
function parsePart(part) {
    // a part could be
    // - a line number: "2"
    // - a line range: "5:9"
    // - a line number with a column selector: "2[1,3:5,9]"
    var columnsMatch = part.match(/(\d+)\[(.+)\]/);
    if (columnsMatch) {
        var _a = __read(columnsMatch, 3), line = _a[1], columns = _a[2];
        var columnsList = columns.split(",").map(expandString);
        var lineIndex = Number(line) - 1;
        var columnIndexes = columnsList.flat().map(function (c) { return c - 1; });
        return [[lineIndex, columnIndexes]];
    }
    else {
        return expandString(part).map(function (lineNumber) { return [
            lineNumber - 1,
            true,
        ]; });
    }
}
function expandString(part) {
    // Transforms something like
    // - "1:3" to [1,2,3]
    // - "4" to [4]
    var _a = __read(part.split(":"), 2), start = _a[0], end = _a[1];
    if (!isNaturalNumber(start)) {
        throw new FocusNumberError(start);
    }
    var startNumber = Number(start);
    if (startNumber < 1) {
        throw new LineOrColumnNumberError();
    }
    if (!end) {
        return [startNumber];
    }
    else {
        if (!isNaturalNumber(end)) {
            throw new FocusNumberError(end);
        }
        var list = [];
        for (var i = startNumber; i <= +end; i++) {
            list.push(i);
        }
        return list;
    }
}
function isNaturalNumber(n) {
    n = n.toString(); // force the value in case it is not
    var n1 = Math.abs(n), n2 = parseInt(n, 10);
    return !isNaN(n1) && n2 === n1 && n1.toString() === n;
}
var LineOrColumnNumberError = /** @class */ (function (_super) {
    __extends(LineOrColumnNumberError, _super);
    function LineOrColumnNumberError() {
        var _newTarget = this.constructor;
        var _this = _super.call(this, "Invalid line or column number in focus string") || this;
        Object.setPrototypeOf(_this, _newTarget.prototype);
        return _this;
    }
    return LineOrColumnNumberError;
}(Error));
var FocusNumberError = /** @class */ (function (_super) {
    __extends(FocusNumberError, _super);
    function FocusNumberError(number) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, "Invalid number \"" + number + "\" in focus string") || this;
        _this.number = number;
        Object.setPrototypeOf(_this, _newTarget.prototype);
        return _this;
    }
    return FocusNumberError;
}(Error));
function fromEntries(pairs) {
    var result = {};
    var index = -1, length = pairs == null ? 0 : pairs.length;
    while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
    }
    return result;
}
// turns a relative string like (1,3) or [4:5] into a normal focus string
function relativeToAbsolute(relativeString, lineNumber) {
    if (!relativeString) {
        return lineNumber.toString();
    }
    if (relativeString.startsWith("[")) {
        return "" + lineNumber + relativeString;
    }
    return splitParts(relativeString.slice(1, -1))
        .map(function (part) { return makePartAbsolute(part, lineNumber); })
        .join(",");
}
function makePartAbsolute(part, lineNumber) {
    var focusMap = parsePartToObject(part);
    var keys = Object.keys(focusMap).map(function (k) { return +k; });
    if (keys.length > 1) {
        var min = Math.min.apply(Math, __spread(keys));
        var max = Math.max.apply(Math, __spread(keys));
        return min + lineNumber - 1 + ":" + (max + lineNumber - 1);
    }
    var newMap = {};
    Object.keys(focusMap).forEach(function (ln) {
        newMap[+ln + lineNumber - 1] = focusMap[+ln];
    });
    return toFocusString(newMap);
}
function toFocusString(focusMap) {
    var parts = [];
    Object.keys(focusMap).forEach(function (ln) {
        var part = focusMap[+ln];
        if (part === true) {
            parts.push(ln);
        }
        else if (part instanceof Array) {
            var columnsString = part.map(function (extremes) {
                return extremes.start === extremes.end
                    ? extremes.start
                    : extremes.start + ":" + extremes.end;
            });
            parts.push(ln + "[" + columnsString + "]");
        }
    });
    return parts.join(",");
}
function mergeFocus(fs1, fs2) {
    if (!fs1)
        return fs2 || "";
    if (!fs2)
        return fs1 || "";
    return fs1 + "," + fs2;
}

exports.ColorName = void 0;
(function (ColorName) {
    ColorName[ColorName["CodeForeground"] = 0] = "CodeForeground";
    ColorName[ColorName["CodeBackground"] = 1] = "CodeBackground";
    ColorName[ColorName["EditorForeground"] = 2] = "EditorForeground";
    ColorName[ColorName["EditorBackground"] = 3] = "EditorBackground";
    ColorName[ColorName["ActiveTabBackground"] = 4] = "ActiveTabBackground";
    ColorName[ColorName["ActiveTabForeground"] = 5] = "ActiveTabForeground";
    ColorName[ColorName["InactiveTabBackground"] = 6] = "InactiveTabBackground";
    ColorName[ColorName["InactiveTabForeground"] = 7] = "InactiveTabForeground";
    ColorName[ColorName["EditorGroupBorder"] = 8] = "EditorGroupBorder";
    ColorName[ColorName["EditorGroupHeaderBackground"] = 9] = "EditorGroupHeaderBackground";
    ColorName[ColorName["TabBorder"] = 10] = "TabBorder";
    ColorName[ColorName["ActiveTabBottomBorder"] = 11] = "ActiveTabBottomBorder";
    ColorName[ColorName["LineNumberForeground"] = 12] = "LineNumberForeground";
    ColorName[ColorName["InputForeground"] = 13] = "InputForeground";
    ColorName[ColorName["InputBackground"] = 14] = "InputBackground";
    ColorName[ColorName["InputBorder"] = 15] = "InputBorder";
    ColorName[ColorName["SelectionBackground"] = 16] = "SelectionBackground";
})(exports.ColorName || (exports.ColorName = {}));
var contrastBorder = "#6FC3DF";
// defaults from: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/common/theme.ts
// and: https://github.com/microsoft/vscode/blob/main/src/vs/editor/common/core/editorColorRegistry.ts
// and: https://github.com/microsoft/vscode/blob/main/src/vs/platform/theme/common/colorRegistry.ts
// keys from : https://code.visualstudio.com/api/references/theme-color#editor-groups-tabs
function getColor(theme, colorName) {
    var _a, _b;
    var colors = theme.colors || {};
    switch (colorName) {
        case exports.ColorName.CodeForeground:
            return (((_a = getGlobalSettings(theme)) === null || _a === void 0 ? void 0 : _a.foreground) ||
                getColor(theme, exports.ColorName.EditorForeground));
        case exports.ColorName.CodeBackground:
            return (((_b = getGlobalSettings(theme)) === null || _b === void 0 ? void 0 : _b.background) ||
                getColor(theme, exports.ColorName.EditorBackground));
        case exports.ColorName.EditorBackground:
            return (colors["editor.background"] ||
                getDefault(theme, {
                    light: "#fffffe",
                    dark: "#1E1E1E",
                    hc: "#000000",
                }));
        case exports.ColorName.EditorForeground:
            return (colors["editor.foreground"] ||
                getDefault(theme, {
                    light: "#333333",
                    dark: "#BBBBBB",
                    hc: "#fffffe",
                }));
        case exports.ColorName.ActiveTabBackground:
            return (colors["tab.activeBackground"] ||
                getColor(theme, exports.ColorName.EditorBackground));
        case exports.ColorName.ActiveTabForeground:
            return (colors["tab.activeForeground"] ||
                getDefault(theme, {
                    dark: "#ffffff",
                    light: "#333333",
                    hc: "#ffffff",
                }));
        case exports.ColorName.InactiveTabBackground:
            return (colors["tab.inactiveBackground"] ||
                getDefault(theme, {
                    dark: "#2D2D2D",
                    light: "#ECECEC",
                    hc: undefined,
                }));
        case exports.ColorName.InactiveTabForeground:
            return (colors["tab.inactiveForeground"] ||
                getDefault(theme, {
                    dark: transparent(getColor(theme, exports.ColorName.ActiveTabForeground), 0.5),
                    light: transparent(getColor(theme, exports.ColorName.ActiveTabForeground), 0.7),
                    hc: "#ffffff",
                }));
        case exports.ColorName.TabBorder:
            return (colors["tab.border"] ||
                getDefault(theme, {
                    dark: "#252526",
                    light: "#F3F3F3",
                    hc: contrastBorder,
                }));
        case exports.ColorName.ActiveTabBottomBorder:
            return (colors["tab.activeBorder"] ||
                getColor(theme, exports.ColorName.ActiveTabBackground));
        case exports.ColorName.EditorGroupBorder:
            return (colors["editorGroup.border"] ||
                getDefault(theme, {
                    dark: "#444444",
                    light: "#E7E7E7",
                    hc: contrastBorder,
                }));
        case exports.ColorName.EditorGroupHeaderBackground:
            return (colors["editorGroupHeader.tabsBackground"] ||
                getDefault(theme, {
                    dark: "#252526",
                    light: "#F3F3F3",
                    hc: undefined,
                }));
        case exports.ColorName.LineNumberForeground:
            return (colors["editorLineNumber.foreground"] ||
                getDefault(theme, {
                    dark: "#858585",
                    light: "#237893",
                    hc: "#fffffe",
                }));
        case exports.ColorName.InputBackground:
            return (colors["input.background"] ||
                getDefault(theme, {
                    dark: "#3C3C3C",
                    light: "#fffffe",
                    hc: "#000000",
                }));
        case exports.ColorName.InputForeground:
            return (colors["input.foreground"] ||
                getColor(theme, exports.ColorName.EditorForeground));
        case exports.ColorName.InputBorder:
            return (colors["input.border"] ||
                getDefault(theme, {
                    dark: undefined,
                    light: undefined,
                    hc: contrastBorder,
                }));
        case exports.ColorName.SelectionBackground:
            return (colors["editor.selectionBackground"] ||
                getDefault(theme, {
                    light: "#ADD6FF",
                    dark: "#264F78",
                    hc: "#f3f518",
                }));
        default:
            return "#f00";
    }
}
function transparent(color, opacity) {
    var _opacity = Math.round(Math.min(Math.max(opacity || 1, 0), 1) * 255);
    return !color
        ? color
        : color + _opacity.toString(16).toUpperCase();
}
function getDefault(theme, defaults) {
    return defaults[getThemeType(theme)];
}
function getThemeType(theme) {
    var _a;
    return (theme.type
        ? theme.type
        : ((_a = theme.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes("light")) ? "light"
            : "dark");
}
function getCodeColors(theme) {
    return {
        fg: getColor(theme, exports.ColorName.CodeForeground),
        bg: getColor(theme, exports.ColorName.CodeBackground),
    };
}
function getGlobalSettings(theme) {
    var settings = theme.settings
        ? theme.settings
        : theme.tokenColors;
    var globalSetting = settings
        ? settings.find(function (s) {
            return !s.name && !s.scope;
        })
        : undefined;
    return globalSetting === null || globalSetting === void 0 ? void 0 : globalSetting.settings;
}

exports.getCodeColors = getCodeColors;
exports.getColor = getColor;
exports.getFocusIndexes = getFocusIndexes;
exports.hasColumns = hasColumns;
exports.map = map;
exports.mapFocusToLineNumbers = mapFocusToLineNumbers;
exports.mapWithDefault = mapWithDefault;
exports.mergeFocus = mergeFocus;
exports.parseExtremes = parseExtremes;
exports.parsePartToObject = parsePartToObject;
exports.relativeToAbsolute = relativeToAbsolute;
exports.splitParts = splitParts;
exports.transparent = transparent;
exports.withDefault = withDefault;
