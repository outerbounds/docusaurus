export declare type Tween<T> = {
    prev?: T;
    next: T;
} | {
    prev: T;
    next?: T;
};
export declare type FullTween<T> = {
    prev: T;
    next: T;
};
declare function map<T, R>(tween: FullTween<T>, fn: (t: T, key: "prev" | "next") => R): FullTween<R>;
declare function map<T, R>(tween: Tween<T>, fn: (t: T | undefined, key: "prev" | "next") => R): Tween<R>;
export { map };
export declare function withDefault<T>(t: Tween<T> | undefined, deft: T): FullTween<T>;
export declare function mapWithDefault<T, R>(tween: Tween<T> | undefined, deft: T, fn: (t: T, key: "prev" | "next") => R): FullTween<R>;
