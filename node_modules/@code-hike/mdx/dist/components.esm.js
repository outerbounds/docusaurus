import React from 'react';
import { CodeSpring } from '@code-hike/smooth-code';
import { EditorSpring } from '@code-hike/mini-editor';
import { MiniBrowser } from '@code-hike/mini-browser';
import { SandpackClient } from '@codesandbox/sandpack-client';
import { Scroller, Step } from '@code-hike/scroller';
import { transparent, getColor, ColorName } from '@code-hike/utils';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function Code(props) {
    var _a = __read(React.useState(props), 2), step = _a[0], setStep = _a[1];
    function onTabClick(filename) {
        var newStep = updateEditorStep(step, filename, null);
        setStep(__assign(__assign({}, step), newStep));
    }
    return React.createElement(InnerCode, __assign({}, step, { onTabClick: onTabClick }));
}
function InnerCode(_a) {
    var onTabClick = _a.onTabClick, props = __rest(_a, ["onTabClick"]);
    if (!props.southPanel &&
        props.files.length === 1 &&
        !props.files[0].name) {
        return (React.createElement("div", { className: "ch-codeblock not-prose" },
            React.createElement(CodeSpring, { className: "ch-code", config: props.codeConfig, step: props.files[0] })));
    }
    else {
        var frameProps = __assign(__assign({}, props === null || props === void 0 ? void 0 : props.frameProps), { onTabClick: onTabClick });
        return (React.createElement("div", { className: "ch-codegroup not-prose" },
            React.createElement(EditorSpring, __assign({}, props, { frameProps: frameProps }))));
    }
}
function updateEditorStep(step, filename, focus) {
    var name = filename || step.northPanel.active;
    var newFiles = step.files.map(function (file) {
        return file.name === name
            ? __assign(__assign({}, file), { focus: focus === null ? file.focus : focus }) : file;
    });
    var northPanel = __assign({}, step.northPanel);
    var southPanel = step.southPanel && __assign({}, step.southPanel);
    if (step.northPanel.tabs.includes(name)) {
        northPanel.active = name;
    }
    else if (southPanel) {
        southPanel.active = name;
    }
    return { files: newFiles, northPanel: northPanel, southPanel: southPanel };
}

var SectionContext = React.createContext({
    props: null,
    setFocus: function () { },
    resetFocus: function () { },
});
function Section(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    var _b = __read(React.useState(props), 2), state = _b[0], setState = _b[1];
    var resetFocus = function () { return setState(props); };
    var setFocus = function (_a) {
        var fileName = _a.fileName, focus = _a.focus, id = _a.id;
        var newStep = updateEditorStep(state, fileName, focus);
        setState(__assign(__assign(__assign({}, state), newStep), { selectedId: id }));
    };
    var selectedId = state.selectedId, rest = __rest(state, ["selectedId"]);
    return (React.createElement(SectionContext.Provider, { value: {
            props: rest,
            setFocus: setFocus,
            resetFocus: resetFocus,
            selectedId: selectedId,
        } },
        React.createElement("section", null, children)));
}
function SectionCode() {
    var _a = React.useContext(SectionContext), props = _a.props, setFocus = _a.setFocus;
    var onTabClick = function (filename) {
        setFocus({ fileName: filename, focus: null, id: "" });
    };
    return React.createElement(InnerCode, __assign({}, props, { onTabClick: onTabClick }));
}
function SectionLink(_a) {
    var focus = _a.focus, file = _a.file, children = _a.children, id = _a.id;
    var _b = React.useContext(SectionContext), setFocus = _b.setFocus, resetFocus = _b.resetFocus, selectedId = _b.selectedId;
    var isSelected = selectedId === id;
    var handleClick = isSelected
        ? resetFocus
        : function () { return setFocus({ fileName: file, focus: focus, id: id }); };
    return (React.createElement("span", { style: {
            textDecoration: "underline",
            textDecorationStyle: "dotted",
            cursor: "pointer",
            backgroundColor: isSelected ? "yellow" : undefined,
        }, onClick: handleClick, children: children }));
}

function Preview(_a) {
    var className = _a.className, files = _a.files, presetConfig = _a.presetConfig, show = _a.show, children = _a.children, codeConfig = _a.codeConfig, style = _a.style, rest = __rest(_a, ["className", "files", "presetConfig", "show", "children", "codeConfig", "style"]);
    return (React.createElement("div", { className: "ch-preview" + (className ? " " + className : ""), style: style },
        React.createElement(MiniBrowser, __assign({ loadUrl: show, theme: codeConfig.theme }, rest, { children: presetConfig ? (React.createElement(SandpackPreview, { files: files, presetConfig: presetConfig })) : (children) }))));
}
function SandpackPreview(_a) {
    var files = _a.files, presetConfig = _a.presetConfig;
    var iframeRef = React.useRef(null);
    var clientRef = React.useRef(null);
    React.useEffect(function () {
        clientRef.current = new SandpackClient(iframeRef.current, __assign(__assign({}, presetConfig), { files: mergeFiles(presetConfig.files, files) }), {
            showOpenInCodeSandbox: false,
        });
    }, []);
    React.useEffect(function () {
        if (clientRef.current) {
            clientRef.current.updatePreview(__assign(__assign({}, presetConfig), { files: mergeFiles(presetConfig.files, files) }));
        }
    }, [files]);
    return React.createElement("iframe", { ref: iframeRef });
}
function mergeFiles(csbFiles, chFiles) {
    var result = __assign({}, csbFiles);
    chFiles.forEach(function (file) {
        result["/" + file.name] = {
            code: file.code.lines
                .map(function (l) { return l.tokens.map(function (t) { return t.content; }).join(""); })
                .join("\n"),
        };
    });
    return result;
}

function Spotlight(_a) {
    var _b;
    var children = _a.children, editorSteps = _a.editorSteps, codeConfig = _a.codeConfig, _c = _a.start, start = _c === void 0 ? 0 : _c, presetConfig = _a.presetConfig;
    var stepsChildren = React.Children.toArray(children);
    var _d = __read(React.useState({
        stepIndex: start,
        step: editorSteps[start],
    }), 2), state = _d[0], setState = _d[1];
    var tab = state.step;
    function onTabClick(filename) {
        var newStep = updateEditorStep(state.step, filename, null);
        setState(__assign(__assign({}, state), { step: newStep }));
    }
    var headerElement = stepsChildren[0];
    return (React.createElement("div", { className: "ch-spotlight " + (presetConfig ? "ch-spotlight-with-preview" : "") },
        React.createElement("div", { className: "ch-spotlight-tabs" },
            ((_b = headerElement === null || headerElement === void 0 ? void 0 : headerElement.props) === null || _b === void 0 ? void 0 : _b.children) ? (React.createElement("div", null, stepsChildren[0])) : null,
            stepsChildren.map(function (children, i) {
                return i === 0 ? null : (React.createElement("div", { key: i, onClick: function () {
                        return setState({
                            stepIndex: i,
                            step: editorSteps[i],
                        });
                    }, className: "ch-spotlight-tab", "data-selected": i === state.stepIndex ? "true" : undefined }, children));
            })),
        React.createElement("div", { className: "ch-spotlight-sticker" },
            React.createElement(InnerCode, __assign({}, tab, { codeConfig: codeConfig, onTabClick: onTabClick })),
            presetConfig && (React.createElement(Preview, { className: "ch-spotlight-preview", files: tab.files, presetConfig: presetConfig, codeConfig: codeConfig })))));
}

function Scrollycoding(_a) {
    var children = _a.children, editorSteps = _a.editorSteps, codeConfig = _a.codeConfig, presetConfig = _a.presetConfig, _b = _a.start, start = _b === void 0 ? 0 : _b;
    var stepsChildren = React.Children.toArray(children);
    var _c = __read(React.useState({
        stepIndex: start,
        step: editorSteps[start],
    }), 2), state = _c[0], setState = _c[1];
    var tab = state.step;
    function onStepChange(index) {
        setState({ stepIndex: index, step: editorSteps[index] });
    }
    function onTabClick(filename) {
        var newStep = updateEditorStep(state.step, filename, null);
        setState(__assign(__assign({}, state), { step: newStep }));
    }
    return (React.createElement("section", { className: "ch-scrollycoding " + (presetConfig ? "ch-scrollycoding-with-preview" : "") },
        React.createElement("div", { className: "ch-scrollycoding-content" },
            React.createElement(Scroller, { onStepChange: onStepChange }, stepsChildren.map(function (children, i) { return (React.createElement(Step, { as: "div", key: i, index: i, onClick: function () { return onStepChange(i); }, className: "ch-scrollycoding-step-content", "data-selected": i === state.stepIndex ? "true" : undefined }, children)); }))),
        React.createElement("div", { className: "ch-scrollycoding-sticker" },
            React.createElement(InnerCode, __assign({}, tab, { codeConfig: codeConfig, onTabClick: onTabClick })),
            presetConfig && (React.createElement(Preview, { className: "ch-scrollycoding-preview", files: tab.files, presetConfig: presetConfig, codeConfig: codeConfig })))));
}

function Slideshow(_a) {
    var children = _a.children, editorSteps = _a.editorSteps, codeConfig = _a.codeConfig, presetConfig = _a.presetConfig, code = _a.code;
    var stepsChildren = React.Children.toArray(children);
    var hasNotes = stepsChildren.some(function (child) { var _a; return (_a = child.props) === null || _a === void 0 ? void 0 : _a.children; });
    var _b = __read(React.useState({
        stepIndex: 0,
        step: editorSteps[0],
    }), 2), state = _b[0], setState = _b[1];
    var tab = state.step;
    function onTabClick(filename) {
        var newStep = updateEditorStep(state.step, filename, null);
        setState(__assign(__assign({}, state), { step: newStep }));
    }
    return (React.createElement("div", { className: "ch-slideshow " + (presetConfig ? "ch-slideshow-with-preview" : "") },
        React.createElement("div", { className: "ch-slideshow-slide" },
            React.createElement(InnerCode, __assign({}, tab, { codeConfig: __assign(__assign({}, codeConfig), code), onTabClick: onTabClick })),
            presetConfig && (React.createElement(Preview, { className: "ch-slideshow-preview", files: tab.files, presetConfig: presetConfig, codeConfig: codeConfig }))),
        React.createElement("div", { className: "ch-slideshow-notes" },
            React.createElement("div", { className: "ch-slideshow-range" },
                React.createElement("button", { onClick: function () {
                        return setState(function (s) {
                            var stepIndex = Math.max(0, s.stepIndex - 1);
                            return {
                                stepIndex: stepIndex,
                                step: editorSteps[stepIndex],
                            };
                        });
                    } }, "Prev"),
                React.createElement("input", { type: "range", min: 0, max: editorSteps.length - 1, value: state.stepIndex, step: 1, onChange: function (e) {
                        return setState({
                            stepIndex: +e.target.value,
                            step: editorSteps[+e.target.value],
                        });
                    } }),
                React.createElement("button", { onClick: function () {
                        return setState(function (s) {
                            var stepIndex = Math.min(editorSteps.length - 1, s.stepIndex + 1);
                            return {
                                stepIndex: stepIndex,
                                step: editorSteps[stepIndex],
                            };
                        });
                    } }, "Next")),
            hasNotes && (React.createElement("div", { className: "ch-slideshow-note" }, stepsChildren[state.stepIndex])))));
}

function Annotation() {
    return "error: code hike remark plugin not running or annotation isn't at the right place";
}
var annotationsMap = {
    box: Box,
    bg: Background,
    label: Label,
    link: CodeLink,
    mark: Mark,
};
function Mark(_a) {
    var children = _a.children, data = _a.data, theme = _a.theme;
    var bg = data && typeof data === "string"
        ? data
        : tryGuessColor(children) ||
            transparent(getColor(theme, ColorName.CodeForeground), 0.2);
    return (React.createElement("span", { className: "ch-code-mark-annotation", style: {
            background: bg,
            borderRadius: "0.25rem",
            padding: "0.2rem 0.15rem 0.1rem",
            margin: "0 -0.15rem",
        } }, children));
}
function tryGuessColor(children) {
    var _a, _b, _c;
    var child = React.Children.toArray(children)[0];
    var grandChild = React.Children.toArray(((_a = child === null || child === void 0 ? void 0 : child.props) === null || _a === void 0 ? void 0 : _a.children) || [])[0];
    var grandGrandChild = React.Children.toArray(((_b = grandChild === null || grandChild === void 0 ? void 0 : grandChild.props) === null || _b === void 0 ? void 0 : _b.children) || [])[0];
    var color = ((_c = grandGrandChild === null || grandGrandChild === void 0 ? void 0 : grandGrandChild.props) === null || _c === void 0 ? void 0 : _c.style).color;
    if (color) {
        return transparent(color, 0.2);
    }
    return undefined;
}
function Box(_a) {
    var _b, _c;
    var children = _a.children, data = _a.data, theme = _a.theme;
    var border = typeof data === "string"
        ? data
        : ((_c = (_b = theme.tokenColors.find(function (tc) { var _a; return (_a = tc.scope) === null || _a === void 0 ? void 0 : _a.includes("string"); })) === null || _b === void 0 ? void 0 : _b.settings) === null || _c === void 0 ? void 0 : _c.foreground) || "yellow";
    return (React.createElement("span", { className: "ch-code-box-annotation", style: { outline: "2px solid " + border } }, children));
}
function Background(_a) {
    var children = _a.children, data = _a.data, style = _a.style, theme = _a.theme;
    var bg = data ||
        (theme.colors["editor.lineHighlightBackground"] ||
            theme.colors["editor.selectionHighlightBackground"]);
    return (React.createElement("div", { style: __assign(__assign({}, style), { background: bg }), className: "ch-code-bg-annotation" },
        React.createElement("span", { className: "ch-code-bg-annotation-border", style: {
                background: "#00a2d3",
                width: "3px",
                height: "100%",
                position: "absolute",
                left: 0,
            } }),
        children));
}
function Label(_a) {
    var children = _a.children, data = _a.data, style = _a.style, theme = _a.theme;
    var bg = (theme.colors["editor.lineHighlightBackground"] ||
        theme.colors["editor.selectionHighlightBackground"]);
    var _b = __read(React.useState(false), 2), hover = _b[0], setHover = _b[1];
    return (React.createElement("div", { style: __assign(__assign({}, style), { background: hover ? bg : undefined }), onMouseEnter: function () { return setHover(true); }, onMouseLeave: function () { return setHover(false); } },
        children,
        React.createElement("div", { style: {
                position: "absolute",
                right: 0,
                paddingRight: 16,
                display: hover ? "block" : "none",
                opacity: 0.7,
            } }, (data === null || data === void 0 ? void 0 : data.children) || data)));
}
function CodeLink(_a) {
    var _b, _c;
    var children = _a.children, data = _a.data;
    var url = ((_b = data) === null || _b === void 0 ? void 0 : _b.url) || data;
    var title = (_c = data) === null || _c === void 0 ? void 0 : _c.title;
    return (React.createElement("a", { href: url, target: "_blank", rel: "noopener noreferrer", title: title, style: {
            textDecoration: "underline",
            textDecorationStyle: "dotted",
            color: "inherit",
        } }, children));
}

function InlineCode(_a) {
    var className = _a.className, codeConfig = _a.codeConfig, children = _a.children, rest = __rest(_a, ["className", "codeConfig", "children"]);
    var theme = codeConfig.theme;
    return (React.createElement("span", __assign({ className: "ch-inline-code not-prose" +
            (className ? " " + className : "") }, rest),
        React.createElement("code", { style: {
                background: transparent(getColor(theme, ColorName.CodeBackground), 0.9),
                color: getColor(theme, ColorName.CodeForeground),
            } }, children)));
}

var CH = {
    Code: Code,
    Section: Section,
    SectionLink: SectionLink,
    SectionCode: SectionCode,
    Spotlight: Spotlight,
    Scrollycoding: Scrollycoding,
    Preview: Preview,
    annotations: annotationsMap,
    Annotation: Annotation,
    Slideshow: Slideshow,
    InlineCode: InlineCode,
};

export { CH };
