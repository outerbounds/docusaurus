import { Tween, FocusString, FullTween, EditorTheme } from "@code-hike/utils";
import React from "react";
import { TweenParams } from "./tween";
export declare type CodeAnnotation = {
    focus: string;
    Component?: (props: {
        style?: React.CSSProperties;
        children: React.ReactNode;
        data: any;
        theme: EditorTheme;
    }) => React.ReactElement;
    data?: any;
};
declare type ParseInput = {
    theme: EditorTheme;
    focus: Tween<FocusString>;
    annotations?: Tween<CodeAnnotation[] | undefined>;
    highlightedLines: FullTween<HighlightedLine[]>;
};
export declare function useStepParser(input: ParseInput): CodeShift;
declare type HighlightedToken = {
    content: string;
    props: {
        style?: React.CSSProperties;
    };
};
export declare type HighlightedLine = {
    tokens: HighlightedToken[];
};
declare type Movement = "enter" | "exit" | "stay";
export declare type MergedLine = {
    tokens: HighlightedToken[];
    lineNumber: Tween<number>;
    move: Movement;
    enterIndex: null | number;
    exitIndex: null | number;
};
export interface MergedCode {
    lines: MergedLine[];
    enterCount: number;
    exitCount: number;
}
export declare type MultiLineAnnotation = {
    lineNumbers: {
        start: number;
        end: number;
    };
    data: any;
    theme: EditorTheme;
    Component: (props: {
        style: React.CSSProperties;
        children: React.ReactNode;
        data: any;
        theme: EditorTheme;
    }) => React.ReactElement;
};
export declare type InlineAnnotation = {
    columnNumbers: {
        start: number;
        end: number;
    };
    data: any;
    theme: EditorTheme;
    Component: (props: {
        style?: React.CSSProperties;
        children: React.ReactNode;
        data: any;
        theme: EditorTheme;
    }) => React.ReactElement;
};
export declare type TokenGroup = {
    tokens: HighlightedToken[];
    focused: FullTween<boolean>;
    element: React.ReactNode;
};
export interface FocusedLine extends Omit<MergedLine, "tokens"> {
    groups: TokenGroup[];
    lineNumber: Tween<number>;
    focused: FullTween<boolean>;
}
export interface FocusedCode extends Omit<MergedCode, "lines"> {
    lines: FocusedLine[];
    firstFocusedLineNumber: FullTween<number>;
    lastFocusedLineNumber: FullTween<number>;
}
export declare type AnnotatedTokenGroups = {
    groups: TokenGroup[];
    annotation?: InlineAnnotation;
};
export interface AnnotatedLine extends Omit<FocusedLine, "groups"> {
    annotatedGroups: Tween<AnnotatedTokenGroups>[];
}
export declare type LineGroup = {
    annotation?: MultiLineAnnotation;
    lines: AnnotatedLine[];
};
export interface AnnotatedCode extends Omit<FocusedCode, "lines"> {
    lineGroups: FullTween<LineGroup[]>;
    firstFocusedLineNumber: FullTween<number>;
    lastFocusedLineNumber: FullTween<number>;
    lineCount: FullTween<number>;
}
export declare type LineWithElement = AnnotatedLine & {
    key: number;
    tweenX: TweenParams;
    tweenY: TweenParams;
};
declare type LineGroupWithElement = {
    annotation?: MultiLineAnnotation;
    lines: LineWithElement[];
};
export declare type CodeShift = {
    groups: FullTween<LineGroupWithElement[]>;
    firstFocusedLineNumber: FullTween<number>;
    lastFocusedLineNumber: FullTween<number>;
    verticalInterval: [number, number];
    lineCount: FullTween<number>;
    code: FullTween<string>;
};
export {};
