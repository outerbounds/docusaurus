"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5019],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),h=l,k=p["".concat(o,".").concat(h)]||p[h]||d[h]||r;return n?a.createElement(k,s(s({ref:t},c),{},{components:n})):a.createElement(k,s({ref:t},c))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,s=new Array(r);s[0]=p;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:l,s[1]=i;for(var u=2;u<r;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1627:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var a=n(7462),l=n(3366),r=(n(7294),n(3905)),s=["components"],i={sidebar_label:"core",title:"client.core"},o=void 0,u={unversionedId:"api/metaflow/client/core",id:"api/metaflow/client/core",title:"client.core",description:"metadata",source:"@site/docs/api/metaflow/client/core.md",sourceDirName:"api/metaflow/client",slug:"/api/metaflow/client/core",permalink:"/docusaurus/docs/api/metaflow/client/core",editUrl:"https://github.com/outerbounds/docusaurus/tree/main/docs/api/metaflow/client/core.md",tags:[],version:"current",frontMatter:{sidebar_label:"core",title:"client.core"},sidebar:"apiMetaflow",next:{title:"filecache",permalink:"/docusaurus/docs/api/metaflow/client/filecache"}},c=[{value:"metadata",id:"metadata",children:[],level:4},{value:"Parameters",id:"parameters",children:[],level:2},{value:"Returns",id:"returns",children:[{value:"get_metadata",id:"get_metadata",children:[],level:4}],level:2},{value:"Returns",id:"returns-1",children:[{value:"default_metadata",id:"default_metadata",children:[],level:4}],level:2},{value:"Returns",id:"returns-2",children:[{value:"namespace",id:"namespace",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-1",children:[],level:2},{value:"Returns",id:"returns-3",children:[{value:"get_namespace",id:"get_namespace",children:[],level:4}],level:2},{value:"Returns",id:"returns-4",children:[{value:"default_namespace",id:"default_namespace",children:[],level:4}],level:2},{value:"Returns",id:"returns-5",children:[],level:2},{value:"Metaflow Objects",id:"metaflow-objects",children:[],level:2},{value:"Attributes",id:"attributes",children:[{value:"flows",id:"flows",children:[],level:4}],level:2},{value:"Returns",id:"returns-6",children:[{value:"__iter__",id:"__iter__",children:[],level:4}],level:2},{value:"Yields",id:"yields",children:[{value:"__getitem__",id:"__getitem__",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-2",children:[],level:2},{value:"Returns",id:"returns-7",children:[],level:2},{value:"MetaflowObject Objects",id:"metaflowobject-objects",children:[],level:2},{value:"Attributes",id:"attributes-1",children:[{value:"__iter__",id:"__iter__-1",children:[],level:4}],level:2},{value:"Returns",id:"returns-8",children:[{value:"is_in_namespace",id:"is_in_namespace",children:[],level:4}],level:2},{value:"Returns",id:"returns-9",children:[{value:"__getitem__",id:"__getitem__-1",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-3",children:[],level:2},{value:"Returns",id:"returns-10",children:[],level:2},{value:"Raises",id:"raises",children:[{value:"__contains__",id:"__contains__",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-4",children:[],level:2},{value:"Returns",id:"returns-11",children:[{value:"tags",id:"tags",children:[],level:4}],level:2},{value:"Returns",id:"returns-12",children:[{value:"created_at",id:"created_at",children:[],level:4}],level:2},{value:"Returns",id:"returns-13",children:[{value:"origin_pathspec",id:"origin_pathspec",children:[],level:4},{value:"parent",id:"parent",children:[],level:4}],level:2},{value:"Returns",id:"returns-14",children:[{value:"pathspec",id:"pathspec",children:[],level:4}],level:2},{value:"Returns",id:"returns-15",children:[{value:"path_components",id:"path_components",children:[],level:4}],level:2},{value:"Returns",id:"returns-16",children:[],level:2},{value:"MetaflowCode Objects",id:"metaflowcode-objects",children:[],level:2},{value:"Attributes",id:"attributes-2",children:[{value:"path",id:"path",children:[],level:4}],level:2},{value:"Returns",id:"returns-17",children:[{value:"info",id:"info",children:[],level:4}],level:2},{value:"Returns",id:"returns-18",children:[{value:"flowspec",id:"flowspec",children:[],level:4}],level:2},{value:"Returns",id:"returns-19",children:[{value:"tarball",id:"tarball",children:[],level:4}],level:2},{value:"Returns",id:"returns-20",children:[],level:2},{value:"DataArtifact Objects",id:"dataartifact-objects",children:[],level:2},{value:"Attributes",id:"attributes-3",children:[{value:"data",id:"data",children:[],level:4}],level:2},{value:"Returns",id:"returns-21",children:[{value:"size",id:"size",children:[],level:4}],level:2},{value:"Returns",id:"returns-22",children:[{value:"sha",id:"sha",children:[],level:4}],level:2},{value:"Returns",id:"returns-23",children:[{value:"finished_at",id:"finished_at",children:[],level:4}],level:2},{value:"Returns",id:"returns-24",children:[],level:2},{value:"Task Objects",id:"task-objects",children:[],level:2},{value:"Attributes",id:"attributes-4",children:[{value:"metadata",id:"metadata-1",children:[],level:4}],level:2},{value:"Returns",id:"returns-25",children:[{value:"metadata_dict",id:"metadata_dict",children:[],level:4}],level:2},{value:"Returns",id:"returns-26",children:[{value:"index",id:"index",children:[],level:4}],level:2},{value:"Returns",id:"returns-27",children:[{value:"data",id:"data-1",children:[],level:4}],level:2},{value:"Returns",id:"returns-28",children:[{value:"artifacts",id:"artifacts",children:[],level:4}],level:2},{value:"Returns",id:"returns-29",children:[{value:"successful",id:"successful",children:[],level:4}],level:2},{value:"Returns",id:"returns-30",children:[{value:"finished",id:"finished",children:[],level:4}],level:2},{value:"Returns",id:"returns-31",children:[{value:"exception",id:"exception",children:[],level:4}],level:2},{value:"Returns",id:"returns-32",children:[{value:"finished_at",id:"finished_at-1",children:[],level:4}],level:2},{value:"Returns",id:"returns-33",children:[{value:"runtime_name",id:"runtime_name",children:[],level:4}],level:2},{value:"Returns",id:"returns-34",children:[{value:"stdout",id:"stdout",children:[],level:4}],level:2},{value:"Returns",id:"returns-35",children:[{value:"stdout_size",id:"stdout_size",children:[],level:4}],level:2},{value:"Returns",id:"returns-36",children:[{value:"stderr",id:"stderr",children:[],level:4}],level:2},{value:"Returns",id:"returns-37",children:[{value:"stderr_size",id:"stderr_size",children:[],level:4}],level:2},{value:"Returns",id:"returns-38",children:[{value:"current_attempt",id:"current_attempt",children:[],level:4}],level:2},{value:"Returns",id:"returns-39",children:[{value:"code",id:"code",children:[],level:4}],level:2},{value:"Returns",id:"returns-40",children:[{value:"environment_info",id:"environment_info",children:[],level:4}],level:2},{value:"Returns",id:"returns-41",children:[{value:"loglines",id:"loglines",children:[],level:4}],level:2},{value:"Step Objects",id:"step-objects",children:[],level:2},{value:"Attributes",id:"attributes-5",children:[{value:"task",id:"task",children:[],level:4}],level:2},{value:"Returns",id:"returns-42",children:[{value:"tasks",id:"tasks",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-5",children:[],level:2},{value:"Returns",id:"returns-43",children:[{value:"control_task",id:"control_task",children:[],level:4}],level:2},{value:"Returns",id:"returns-44",children:[{value:"control_tasks",id:"control_tasks",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-6",children:[],level:2},{value:"Returns",id:"returns-45",children:[{value:"finished_at",id:"finished_at-2",children:[],level:4}],level:2},{value:"Returns",id:"returns-46",children:[{value:"environment_info",id:"environment_info-1",children:[],level:4}],level:2},{value:"Returns",id:"returns-47",children:[],level:2},{value:"Run Objects",id:"run-objects",children:[],level:2},{value:"Attributes",id:"attributes-6",children:[{value:"steps",id:"steps",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-7",children:[],level:2},{value:"Returns",id:"returns-48",children:[{value:"code",id:"code-1",children:[],level:4}],level:2},{value:"Returns",id:"returns-49",children:[{value:"data",id:"data-2",children:[],level:4}],level:2},{value:"Returns",id:"returns-50",children:[{value:"successful",id:"successful-1",children:[],level:4}],level:2},{value:"Returns",id:"returns-51",children:[{value:"finished",id:"finished-1",children:[],level:4}],level:2},{value:"Returns",id:"returns-52",children:[{value:"finished_at",id:"finished_at-3",children:[],level:4}],level:2},{value:"Returns",id:"returns-53",children:[{value:"end_task",id:"end_task",children:[],level:4}],level:2},{value:"Returns",id:"returns-54",children:[],level:2},{value:"Flow Objects",id:"flow-objects",children:[],level:2},{value:"Attributes",id:"attributes-7",children:[{value:"latest_run",id:"latest_run",children:[],level:4}],level:2},{value:"Returns",id:"returns-55",children:[{value:"latest_successful_run",id:"latest_successful_run",children:[],level:4}],level:2},{value:"Returns",id:"returns-56",children:[{value:"runs",id:"runs",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-8",children:[],level:2},{value:"Returns",id:"returns-57",children:[],level:2}],d={toc:c};function p(e){var t=e.components,n=(0,l.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"metadata"},"metadata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"metadata(ms)\n")),(0,r.kt)("p",null,"Switch Metadata provider."),(0,r.kt)("p",null,"This call has a global effect. Selecting the local metadata will,\nfor example, not allow access to information stored in remote\nmetadata providers."),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"ms : string\nCan be a path (selects local metadata), a URL starting with http (selects\nthe service metadata) or an explicit specification ","<","metadata_type",">","@","<","info",">","; as an\nexample, you can specify local@","<","path",">"," or service@","<","url",">","."),(0,r.kt)("h2",{id:"returns"},"Returns"),(0,r.kt)("p",null,"string\nThe description of the metadata selected (equivalent to the result of\nget_metadata())"),(0,r.kt)("h4",{id:"get_metadata"},"get","_","metadata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"get_metadata()\n")),(0,r.kt)("p",null,"Returns the current Metadata provider."),(0,r.kt)("p",null,"This call returns the current Metadata being used to return information\nabout Metaflow objects."),(0,r.kt)("p",null,"If this is not set explicitly using metadata(), the default value is\ndetermined through environment variables."),(0,r.kt)("h2",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,"string\nInformation about the Metadata provider currently selected. This information typically\nreturns provider specific information (like URL for remote providers or local paths for\nlocal providers)."),(0,r.kt)("h4",{id:"default_metadata"},"default","_","metadata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"default_metadata()\n")),(0,r.kt)("p",null,"Resets the Metadata provider to the default value."),(0,r.kt)("p",null,"The default value of the Metadata provider is determined through a combination of\nenvironment variables."),(0,r.kt)("h2",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,"string\nThe result of get_metadata() after resetting the provider."),(0,r.kt)("h4",{id:"namespace"},"namespace"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"namespace(ns)\n")),(0,r.kt)("p",null,"Switch namespace to the one provided."),(0,r.kt)("p",null,"This call has a global effect. No objects outside this namespace\nwill be accessible. To access all objects regardless of namespaces,\npass None to this call."),(0,r.kt)("h2",{id:"parameters-1"},"Parameters"),(0,r.kt)("p",null,"ns : string\nNamespace to switch to or None to ignore namespaces."),(0,r.kt)("h2",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,"string\nNamespace set (result of get_namespace())."),(0,r.kt)("h4",{id:"get_namespace"},"get","_","namespace"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"get_namespace()\n")),(0,r.kt)("p",null,"Return the current namespace that is currently being used to filter objects."),(0,r.kt)("p",null,"The namespace is a tag associated with all objects in Metaflow."),(0,r.kt)("h2",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,"string or None\nThe current namespace used to filter objects."),(0,r.kt)("h4",{id:"default_namespace"},"default","_","namespace"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"default_namespace()\n")),(0,r.kt)("p",null,"Sets or resets the namespace used to filter objects."),(0,r.kt)("p",null,"The default namespace is in the form ","'","user:","<","username",">","'"," and is intended to filter\nobjects belonging to the user."),(0,r.kt)("h2",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,"string\nThe result of get_namespace() after"),(0,r.kt)("h2",{id:"metaflow-objects"},"Metaflow Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Metaflow(object)\n")),(0,r.kt)("p",null,"Entry point to all objects in the Metaflow universe."),(0,r.kt)("p",null,"This object can be used to list all the flows present either through the explicit property\nor by iterating over this object."),(0,r.kt)("h2",{id:"attributes"},"Attributes"),(0,r.kt)("p",null,"flows : List of all flows.\nReturns the list of all flows. Note that only flows present in the set namespace will\nbe returned. A flow is present in a namespace if it has at least one run in the\nnamespace."),(0,r.kt)("h4",{id:"flows"},"flows"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | flows()\n")),(0,r.kt)("p",null,"Returns a list of all the flows present."),(0,r.kt)("p",null,"Only flows present in the set namespace are returned. A flow is present in a namespace if\nit has at least one run that is in the namespace."),(0,r.kt)("h2",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,"List","[Flow]","\nList of all flows present."),(0,r.kt)("h4",{id:"__iter__"},"_","_","iter","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | __iter__()\n")),(0,r.kt)("p",null,"Iterator over all flows present."),(0,r.kt)("p",null,"Only flows present in the set namespace are returned. A flow is present in a namespace if\nit has at least one run that is in the namespace."),(0,r.kt)("h2",{id:"yields"},"Yields"),(0,r.kt)("p",null,"Flow\nA Flow present in the Metaflow universe."),(0,r.kt)("h4",{id:"__getitem__"},"_","_","getitem","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | __getitem__(id)\n")),(0,r.kt)("p",null,"Returns a specific flow by name."),(0,r.kt)("p",null,"The flow will only be returned if it is present in the current namespace."),(0,r.kt)("h2",{id:"parameters-2"},"Parameters"),(0,r.kt)("p",null,"id : string\nName of the Flow"),(0,r.kt)("h2",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,"Flow\nFlow with the given ID."),(0,r.kt)("h2",{id:"metaflowobject-objects"},"MetaflowObject Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class MetaflowObject(object)\n")),(0,r.kt)("p",null,"Base class for all Metaflow objects."),(0,r.kt)("p",null,"Creates a new object of a specific type (Flow, Run, Step, Task, DataArtifact) given\na path to it (its ",(0,r.kt)("inlineCode",{parentName:"p"},"pathspec"),")."),(0,r.kt)("p",null,"Accessing Metaflow objects is done through one of two methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"either by directly instantiating it with this class"),(0,r.kt)("li",{parentName:"ul"},"or by accessing it through its parent (iterating over\nall children or accessing directly using the [] operator)")),(0,r.kt)("p",null,"With this class, you can:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get a ",(0,r.kt)("inlineCode",{parentName:"li"},"Flow"),"; use ",(0,r.kt)("inlineCode",{parentName:"li"},"Flow(&#x27;FlowName&#x27;)"),"."),(0,r.kt)("li",{parentName:"ul"},"Get a ",(0,r.kt)("inlineCode",{parentName:"li"},"Run")," of a flow; use ",(0,r.kt)("inlineCode",{parentName:"li"},"Run(&#x27;FlowName/RunID&#x27;)"),"."),(0,r.kt)("li",{parentName:"ul"},"Get a ",(0,r.kt)("inlineCode",{parentName:"li"},"Step")," of a run; use ",(0,r.kt)("inlineCode",{parentName:"li"},"Step(&#x27;FlowName/RunID/StepName&#x27;)"),"."),(0,r.kt)("li",{parentName:"ul"},"Get a ",(0,r.kt)("inlineCode",{parentName:"li"},"Task")," of a step, use ",(0,r.kt)("inlineCode",{parentName:"li"},"Task(&#x27;FlowName/RunID/StepName/TaskID&#x27;)")),(0,r.kt)("li",{parentName:"ul"},"Get a ",(0,r.kt)("inlineCode",{parentName:"li"},"DataArtifact")," of a task; use\n",(0,r.kt)("inlineCode",{parentName:"li"},"DataArtifact(&#x27;FlowName/RunID/StepName/TaskID/ArtifactName&#x27;)"),".")),(0,r.kt)("h2",{id:"attributes-1"},"Attributes"),(0,r.kt)("p",null,"tags : Set\nTags associated with the object.\ncreated_at : datetime\nDate and time this object was first created.\nparent : MetaflowObject\nParent of this object. The parent of a ",(0,r.kt)("inlineCode",{parentName:"p"},"Run")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Flow")," for example\npathspec : string\nPathspec of this object (for example: ","'","FlowName/RunID","'"," for a ",(0,r.kt)("inlineCode",{parentName:"p"},"Run"),")\npath_components : List","[string]","\nComponents of the pathspec\norigin_pathspec : str\nPathspec of the original object this object was cloned from (in the case of a resume).\nNone if not applicable."),(0,r.kt)("h4",{id:"__iter__-1"},"_","_","iter","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | __iter__()\n")),(0,r.kt)("p",null,"Iterate over all child objects of this object if any."),(0,r.kt)("p",null,"Note that only children present in the current namespace are returned."),(0,r.kt)("h2",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,"Iterator","[MetaflowObject]","\nIterator over all children"),(0,r.kt)("h4",{id:"is_in_namespace"},"is","_","in","_","namespace"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | is_in_namespace()\n")),(0,r.kt)("p",null,"Returns whether this object is in the current namespace."),(0,r.kt)("p",null,"If the current namespace is None, this will always return True."),(0,r.kt)("h2",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,"bool\nWhether or not the object is in the current namespace"),(0,r.kt)("h4",{id:"__getitem__-1"},"_","_","getitem","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | __getitem__(id)\n")),(0,r.kt)("p",null,"Returns the child object named ","'","id","'","."),(0,r.kt)("h2",{id:"parameters-3"},"Parameters"),(0,r.kt)("p",null,"id : string\nName of the child object"),(0,r.kt)("h2",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,"MetaflowObject\nChild object"),(0,r.kt)("h2",{id:"raises"},"Raises"),(0,r.kt)("p",null,"KeyError\nIf the name does not identify a valid child object"),(0,r.kt)("h4",{id:"__contains__"},"_","_","contains","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | __contains__(id)\n")),(0,r.kt)("p",null,"Tests whether a child named ","'","id","'"," exists."),(0,r.kt)("h2",{id:"parameters-4"},"Parameters"),(0,r.kt)("p",null,"id : string\nName of the child object"),(0,r.kt)("h2",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,"bool\nTrue if the child exists or False otherwise"),(0,r.kt)("h4",{id:"tags"},"tags"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | tags()\n")),(0,r.kt)("p",null,"Tags associated with this object."),(0,r.kt)("p",null,"Tags can be user defined or system defined. This returns all tags associated\nwith the object."),(0,r.kt)("h2",{id:"returns-12"},"Returns"),(0,r.kt)("p",null,"Set","[string]","\nTags associated with the object"),(0,r.kt)("h4",{id:"created_at"},"created","_","at"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | created_at()\n")),(0,r.kt)("p",null,"Creation time for this object."),(0,r.kt)("p",null,"This corresponds to the time the object","'","s existence was first created which typically means\nright before any code is run."),(0,r.kt)("h2",{id:"returns-13"},"Returns"),(0,r.kt)("p",null,"datetime\nDate time of this object","'","s creation."),(0,r.kt)("h4",{id:"origin_pathspec"},"origin","_","pathspec"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | origin_pathspec()\n")),(0,r.kt)("p",null,"The pathspec of the object from which the current object was cloned."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  str\npathspec of the origin object from which current object was cloned."),(0,r.kt)("h4",{id:"parent"},"parent"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | parent()\n")),(0,r.kt)("p",null,"Returns the parent object of this object or None if none exists."),(0,r.kt)("h2",{id:"returns-14"},"Returns"),(0,r.kt)("p",null,"MetaflowObject\nThe parent of this object"),(0,r.kt)("h4",{id:"pathspec"},"pathspec"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | pathspec()\n")),(0,r.kt)("p",null,"Returns a string representation uniquely identifying this object."),(0,r.kt)("p",null,"The string is the same as the one you would pass into the constructor\nto build this object except if you are looking for a specific attempt of\na task or a data artifact (in which case you need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"attempt=&lt;attempt&gt;"),"\nin the constructor)."),(0,r.kt)("h2",{id:"returns-15"},"Returns"),(0,r.kt)("p",null,"string\nUnique representation of this object"),(0,r.kt)("h4",{id:"path_components"},"path","_","components"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | path_components()\n")),(0,r.kt)("p",null,"List of individual components of the pathspec."),(0,r.kt)("h2",{id:"returns-16"},"Returns"),(0,r.kt)("p",null,"List","[string]","\nIndividual components of the pathspec"),(0,r.kt)("h2",{id:"metaflowcode-objects"},"MetaflowCode Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class MetaflowCode(object)\n")),(0,r.kt)("p",null,"Describes the code that is occasionally stored with a run."),(0,r.kt)("p",null,"A code package will contain the version of Metaflow that was used (all the files comprising\nthe Metaflow library) as well as selected files from the directory containing the Python\nfile of the FlowSpec."),(0,r.kt)("h2",{id:"attributes-2"},"Attributes"),(0,r.kt)("p",null,"path : string\nLocation (in the datastore provider) of the code package\ninfo : Dict\nDictionary of information related to this code-package\nflowspec : string\nSource code of the file containing the FlowSpec in this code package\ntarball : TarFile\nTar ball containing all the code"),(0,r.kt)("h4",{id:"path"},"path"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | path()\n")),(0,r.kt)("p",null,"Location (in the datastore provider) of the code package."),(0,r.kt)("h2",{id:"returns-17"},"Returns"),(0,r.kt)("p",null,"string\nFull path of the code package"),(0,r.kt)("h4",{id:"info"},"info"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | info()\n")),(0,r.kt)("p",null,"Metadata associated with the code package."),(0,r.kt)("h2",{id:"returns-18"},"Returns"),(0,r.kt)("p",null,"Dict\nDictionary of metadata. Keys and values are strings"),(0,r.kt)("h4",{id:"flowspec"},"flowspec"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | flowspec()\n")),(0,r.kt)("p",null,"Source code of the Python file containing the FlowSpec."),(0,r.kt)("h2",{id:"returns-19"},"Returns"),(0,r.kt)("p",null,"string\nContent of the Python file"),(0,r.kt)("h4",{id:"tarball"},"tarball"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | tarball()\n")),(0,r.kt)("p",null,"TarFile for this code package."),(0,r.kt)("h2",{id:"returns-20"},"Returns"),(0,r.kt)("p",null,"TarFile\nTarFile for everything in this code package"),(0,r.kt)("h2",{id:"dataartifact-objects"},"DataArtifact Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class DataArtifact(MetaflowObject)\n")),(0,r.kt)("p",null,"A single data artifact and associated metadata."),(0,r.kt)("h2",{id:"attributes-3"},"Attributes"),(0,r.kt)("p",null,"data : object\nThe unpickled representation of the data contained in this artifact\nsha : string\nEncoding representing the unique identity of this artifact\nfinished_at : datetime\nAlias for created_at"),(0,r.kt)("h4",{id:"data"},"data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | data()\n")),(0,r.kt)("p",null,"Unpickled representation of the data contained in this artifact."),(0,r.kt)("h2",{id:"returns-21"},"Returns"),(0,r.kt)("p",null,"object\nObject contained in this artifact"),(0,r.kt)("h4",{id:"size"},"size"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | size()\n")),(0,r.kt)("p",null,"Returns the size (in bytes) of the pickled object representing this\nDataArtifact"),(0,r.kt)("h2",{id:"returns-22"},"Returns"),(0,r.kt)("p",null,"int\nsize of the pickled representation of data artifact (in bytes)"),(0,r.kt)("h4",{id:"sha"},"sha"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | sha()\n")),(0,r.kt)("p",null,"Unique identifier for this artifact."),(0,r.kt)("p",null,"This is a unique hash of the artifact (historically SHA1 hash)"),(0,r.kt)("h2",{id:"returns-23"},"Returns"),(0,r.kt)("p",null,"string\nHash of this artifact"),(0,r.kt)("h4",{id:"finished_at"},"finished","_","at"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | finished_at()\n")),(0,r.kt)("p",null,"Creation time for this artifact."),(0,r.kt)("p",null,"Alias for created_at."),(0,r.kt)("h2",{id:"returns-24"},"Returns"),(0,r.kt)("p",null,"datetime\nCreation time"),(0,r.kt)("h2",{id:"task-objects"},"Task Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Task(MetaflowObject)\n")),(0,r.kt)("p",null,"A Task represents an execution of a step."),(0,r.kt)("p",null,"As such, it contains all data artifacts associated with that execution as\nwell as all metadata associated with the execution."),(0,r.kt)("p",null,"Note that you can also get information about a specific ",(0,r.kt)("em",{parentName:"p"},"attempt")," of a\ntask. By default, the latest finished attempt is returned but you can\nexplicitly get information about a specific attempt by using the\nfollowing syntax when creating a task:\n",(0,r.kt)("inlineCode",{parentName:"p"},"Task(&#x27;flow/run/step/task&#x27;, attempt=&lt;attempt&gt;)"),". Note that you will not be able to\naccess a specific attempt of a task through the ",(0,r.kt)("inlineCode",{parentName:"p"},".tasks")," method of a step\nfor example (that will always return the latest attempt)."),(0,r.kt)("h2",{id:"attributes-4"},"Attributes"),(0,r.kt)("p",null,"metadata : List","[Metadata]","\nList of all metadata associated with the task\nmetadata_dict : Dict\nDictionary where the keys are the names of the metadata and the value are the values\nassociated with those names\ndata : MetaflowData\nContainer of all data artifacts produced by this task\nartifacts : MetaflowArtifacts\nContainer of DataArtifact objects produced by this task\nsuccessful : boolean\nTrue if the task successfully completed\nfinished : boolean\nTrue if the task completed\nexception : object\nException raised by this task if there was one\nfinished_at : datetime\nTime this task finished\nruntime_name : string\nRuntime this task was executed on\nstdout : string\nStandard output for the task execution\nstderr : string\nStandard error output for the task execution\ncode : MetaflowCode\nCode package for this task (if present)\nenvironment_info : Dict\nInformation about the execution environment (for example Conda)"),(0,r.kt)("h4",{id:"metadata-1"},"metadata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | metadata()\n")),(0,r.kt)("p",null,"Metadata events produced by this task across all attempts of the task\n",(0,r.kt)("em",{parentName:"p"},"except")," if you selected a specific task attempt."),(0,r.kt)("p",null,"Note that Metadata is different from tags."),(0,r.kt)("h2",{id:"returns-25"},"Returns"),(0,r.kt)("p",null,"List","[Metadata]","\nMetadata produced by this task"),(0,r.kt)("h4",{id:"metadata_dict"},"metadata","_","dict"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | metadata_dict()\n")),(0,r.kt)("p",null,"Dictionary mapping metadata names (keys) and their associated values."),(0,r.kt)("p",null,"Note that unlike the metadata() method, this call will only return the latest\nmetadata for a given name. For example, if a task executes multiple times (retries),\nthe same metadata name will be generated multiple times (one for each execution of the\ntask). The metadata() method returns all those metadata elements whereas this call will\nreturn the metadata associated with the latest execution of the task."),(0,r.kt)("h2",{id:"returns-26"},"Returns"),(0,r.kt)("p",null,"Dict\nDictionary mapping metadata name with value"),(0,r.kt)("h4",{id:"index"},"index"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | index()\n")),(0,r.kt)("p",null,"Returns the index of the innermost foreach loop if this task is run inside at least\none foreach."),(0,r.kt)("p",null,"The index is what distinguishes the various tasks inside a given step.\nThis call returns None if this task was not run in a foreach loop."),(0,r.kt)("h2",{id:"returns-27"},"Returns"),(0,r.kt)("p",null,"int\nIndex in the innermost loop for this task"),(0,r.kt)("h4",{id:"data-1"},"data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | data()\n")),(0,r.kt)("p",null,"Returns a container of data artifacts produced by this task."),(0,r.kt)("p",null,"You can access data produced by this task as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"print(task.data.my_var)\n")),(0,r.kt)("h2",{id:"returns-28"},"Returns"),(0,r.kt)("p",null,"MetaflowData\nContainer of all artifacts produced by this task"),(0,r.kt)("h4",{id:"artifacts"},"artifacts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | artifacts()\n")),(0,r.kt)("p",null,"Returns a container of DataArtifacts produced by this task."),(0,r.kt)("p",null,"You can access each DataArtifact by name like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"print(task.artifacts.my_var)\n")),(0,r.kt)("p",null,"This method differs from data() because it returns DataArtifact objects\n(which contain additional metadata) as opposed to just the data."),(0,r.kt)("h2",{id:"returns-29"},"Returns"),(0,r.kt)("p",null,"MetaflowArtifacts\nContainer of all DataArtifacts produced by this task"),(0,r.kt)("h4",{id:"successful"},"successful"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | successful()\n")),(0,r.kt)("p",null,"Indicates whether or not the task completed successfully."),(0,r.kt)("p",null,"This information is always about the latest task to have completed (in case\nof retries)."),(0,r.kt)("h2",{id:"returns-30"},"Returns"),(0,r.kt)("p",null,"bool\nTrue if the task completed successfully and False otherwise"),(0,r.kt)("h4",{id:"finished"},"finished"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | finished()\n")),(0,r.kt)("p",null,"Indicates whether or not the task completed."),(0,r.kt)("p",null,"This information is always about the latest task to have completed (in case\nof retries)."),(0,r.kt)("h2",{id:"returns-31"},"Returns"),(0,r.kt)("p",null,"bool\nTrue if the task completed and False otherwise"),(0,r.kt)("h4",{id:"exception"},"exception"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | exception()\n")),(0,r.kt)("p",null,"Returns the exception that caused the task to fail, if any."),(0,r.kt)("p",null,"This information is always about the latest task to have completed (in case\nof retries). If successful() returns False and finished() returns True,\nthis method can help determine what went wrong."),(0,r.kt)("h2",{id:"returns-32"},"Returns"),(0,r.kt)("p",null,"object\nException raised by the task or None if not applicable"),(0,r.kt)("h4",{id:"finished_at-1"},"finished","_","at"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | finished_at()\n")),(0,r.kt)("p",null,"Returns the datetime object of when the task finished (successfully or not)."),(0,r.kt)("p",null,"This information is always about the latest task to have completed (in case\nof retries). This call will return None if the task is not finished."),(0,r.kt)("h2",{id:"returns-33"},"Returns"),(0,r.kt)("p",null,"datetime\nDatetime of when the task finished"),(0,r.kt)("h4",{id:"runtime_name"},"runtime","_","name"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | runtime_name()\n")),(0,r.kt)("p",null,"Returns the name of the runtime this task executed on."),(0,r.kt)("h2",{id:"returns-34"},"Returns"),(0,r.kt)("p",null,"string\nName of the runtime this task executed on"),(0,r.kt)("h4",{id:"stdout"},"stdout"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | stdout()\n")),(0,r.kt)("p",null,"Returns the full standard out of this task."),(0,r.kt)("p",null,"If you specify a specific attempt for this task, it will return the\nstandard out for that attempt. If you do not specify an attempt,\nthis will return the current standard out for the latest ",(0,r.kt)("em",{parentName:"p"},"started"),"\nattempt of the task. In both cases, multiple calls to this\nmethod will return the most up-to-date log (so if an attempt is not\ndone, each call will fetch the latest log)."),(0,r.kt)("h2",{id:"returns-35"},"Returns"),(0,r.kt)("p",null,"string\nStandard output of this task"),(0,r.kt)("h4",{id:"stdout_size"},"stdout","_","size"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | stdout_size()\n")),(0,r.kt)("p",null,"Returns the size of the stdout log of this task."),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"stdout"),", the size returned is the latest size of the log\n(so for a running attempt, this value will increase as the task produces\nmore output)."),(0,r.kt)("h2",{id:"returns-36"},"Returns"),(0,r.kt)("p",null,"int\nSize of the stdout log content (in bytes)"),(0,r.kt)("h4",{id:"stderr"},"stderr"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | stderr()\n")),(0,r.kt)("p",null,"Returns the full standard error of this task."),(0,r.kt)("p",null,"If you specify a specific attempt for this task, it will return the\nstandard error for that attempt. If you do not specify an attempt,\nthis will return the current standard error for the latest ",(0,r.kt)("em",{parentName:"p"},"started"),"\nattempt. In both cases, multiple calls to this\nmethod will return the most up-to-date log (so if an attempt is not\ndone, each call will fetch the latest log)."),(0,r.kt)("h2",{id:"returns-37"},"Returns"),(0,r.kt)("p",null,"string\nStandard error of this task"),(0,r.kt)("h4",{id:"stderr_size"},"stderr","_","size"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | stderr_size()\n")),(0,r.kt)("p",null,"Returns the size of the stderr log of this task."),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"stderr"),", the size returned is the latest size of the log\n(so for a running attempt, this value will increase as the task produces\nmore output)."),(0,r.kt)("h2",{id:"returns-38"},"Returns"),(0,r.kt)("p",null,"int\nSize of the stderr log content (in bytes)"),(0,r.kt)("h4",{id:"current_attempt"},"current","_","attempt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | current_attempt()\n")),(0,r.kt)("p",null,"Get the relevant attempt for this Task."),(0,r.kt)("p",null,"Returns the specific attempt used when\ninitializing the instance, or the latest ",(0,r.kt)("em",{parentName:"p"},"started")," attempt for the Task."),(0,r.kt)("h2",{id:"returns-39"},"Returns"),(0,r.kt)("p",null,"int\nattempt id for this task object"),(0,r.kt)("h4",{id:"code"},"code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @cached_property\n | code()\n")),(0,r.kt)("p",null,"Returns the MetaflowCode object for this task, if present."),(0,r.kt)("p",null,"Not all tasks save their code so this call may return None in those cases."),(0,r.kt)("h2",{id:"returns-40"},"Returns"),(0,r.kt)("p",null,"MetaflowCode\nCode package for this task"),(0,r.kt)("h4",{id:"environment_info"},"environment","_","info"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @cached_property\n | environment_info()\n")),(0,r.kt)("p",null,"Returns information about the environment that was used to execute this task. As an\nexample, if the Conda environment is selected, this will return information about the\ndependencies that were used in the environment."),(0,r.kt)("p",null,"This environment information is only available for tasks that have a code package."),(0,r.kt)("h2",{id:"returns-41"},"Returns"),(0,r.kt)("p",null,"Dict\nDictionary describing the environment"),(0,r.kt)("h4",{id:"loglines"},"loglines"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | loglines(stream, as_unicode=True)\n")),(0,r.kt)("p",null,"Return an iterator over (utc_timestamp, logline) tuples."),(0,r.kt)("p",null,"If as_unicode=False, logline is returned as a byte object. Otherwise,\nit is returned as a (unicode) string."),(0,r.kt)("h2",{id:"step-objects"},"Step Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Step(MetaflowObject)\n")),(0,r.kt)("p",null,"A Step represents a user-defined Step (a method annotated with the @step decorator)."),(0,r.kt)("p",null,"As such, it contains all Tasks associated with the step (ie: all executions of the\nStep). A linear Step will have only one associated task whereas a foreach Step will have\nmultiple Tasks."),(0,r.kt)("h2",{id:"attributes-5"},"Attributes"),(0,r.kt)("p",null,"task : Task\nReturns a Task object from the step\nfinished_at : datetime\nTime this step finished (time of completion of the last task)\nenvironment_info : Dict\nInformation about the execution environment (for example Conda)"),(0,r.kt)("h4",{id:"task"},"task"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | task()\n")),(0,r.kt)("p",null,"Returns a Task object belonging to this step."),(0,r.kt)("p",null,"This is useful when the step only contains one task (a linear step for example)."),(0,r.kt)("h2",{id:"returns-42"},"Returns"),(0,r.kt)("p",null,"Task\nA task in the step"),(0,r.kt)("h4",{id:"tasks"},"tasks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | tasks(*tags)\n")),(0,r.kt)("p",null,"Returns an iterator over all the tasks in the step."),(0,r.kt)("p",null,"An optional filter is available that allows you to filter on tags.\nIf tags are specified, only tasks associated with all specified tags\nare returned."),(0,r.kt)("h2",{id:"parameters-5"},"Parameters"),(0,r.kt)("p",null,"tags : string\nTags to match"),(0,r.kt)("h2",{id:"returns-43"},"Returns"),(0,r.kt)("p",null,"Iterator","[Task]","\nIterator over Task objects in this step"),(0,r.kt)("h4",{id:"control_task"},"control","_","task"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | control_task()\n")),(0,r.kt)("p",null,"Returns a Control Task object belonging to this step.\nThis is useful when the step only contains one control task."),(0,r.kt)("h2",{id:"returns-44"},"Returns"),(0,r.kt)("p",null,"Task\nA control task in the step"),(0,r.kt)("h4",{id:"control_tasks"},"control","_","tasks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | control_tasks(*tags)\n")),(0,r.kt)("p",null,"Returns an iterator over all the control tasks in the step.\nAn optional filter is available that allows you to filter on tags. The\ncontrol tasks returned if the filter is specified will contain all the\ntags specified."),(0,r.kt)("h2",{id:"parameters-6"},"Parameters"),(0,r.kt)("p",null,"tags : string\nTags to match"),(0,r.kt)("h2",{id:"returns-45"},"Returns"),(0,r.kt)("p",null,"Iterator","[Task]","\nIterator over Control Task objects in this step"),(0,r.kt)("h4",{id:"finished_at-2"},"finished","_","at"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | finished_at()\n")),(0,r.kt)("p",null,"Returns the datetime object of when the step finished (successfully or not)."),(0,r.kt)("p",null,"A step is considered finished when all the tasks that belong to it have\nfinished. This call will return None if the step has not finished"),(0,r.kt)("h2",{id:"returns-46"},"Returns"),(0,r.kt)("p",null,"datetime\nDatetime of when the step finished"),(0,r.kt)("h4",{id:"environment_info-1"},"environment","_","info"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | environment_info()\n")),(0,r.kt)("p",null,"Returns information about the environment that was used to execute this step. As an\nexample, if the Conda environment is selected, this will return information about the\ndependencies that were used in the environment."),(0,r.kt)("p",null,"This environment information is only available for steps that have tasks\nfor which the code package has been saved."),(0,r.kt)("h2",{id:"returns-47"},"Returns"),(0,r.kt)("p",null,"Dict\nDictionary describing the environment"),(0,r.kt)("h2",{id:"run-objects"},"Run Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Run(MetaflowObject)\n")),(0,r.kt)("p",null,"A Run represents an execution of a Flow"),(0,r.kt)("p",null,"As such, it contains all Steps associated with the flow."),(0,r.kt)("h2",{id:"attributes-6"},"Attributes"),(0,r.kt)("p",null,"data : MetaflowData\nContainer of all data artifacts produced by this run\nsuccessful : boolean\nTrue if the run successfully completed\nfinished : boolean\nTrue if the run completed\nfinished_at : datetime\nTime this run finished\ncode : MetaflowCode\nCode package for this run (if present)\nend_task : Task\nTask for the end step (if it is present already)"),(0,r.kt)("h4",{id:"steps"},"steps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | steps(*tags)\n")),(0,r.kt)("p",null,"Returns an iterator over all the steps in the run."),(0,r.kt)("p",null,"An optional filter is available that allows you to filter on tags.\nIf tags are specified, only steps associated with all specified tags\nare returned."),(0,r.kt)("h2",{id:"parameters-7"},"Parameters"),(0,r.kt)("p",null,"tags : string\nTags to match"),(0,r.kt)("h2",{id:"returns-48"},"Returns"),(0,r.kt)("p",null,"Iterator","[Step]","\nIterator over Step objects in this run"),(0,r.kt)("h4",{id:"code-1"},"code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | code()\n")),(0,r.kt)("p",null,"Returns the MetaflowCode object for this run, if present."),(0,r.kt)("p",null,"Not all runs save their code so this call may return None in those cases."),(0,r.kt)("h2",{id:"returns-49"},"Returns"),(0,r.kt)("p",null,"MetaflowCode\nCode package for this run"),(0,r.kt)("h4",{id:"data-2"},"data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | data()\n")),(0,r.kt)("p",null,"Returns a container of data artifacts produced by this run."),(0,r.kt)("p",null,"You can access data produced by this run as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"print(run.data.my_var)\n")),(0,r.kt)("p",null,"This is a shorthand for ",(0,r.kt)("inlineCode",{parentName:"p"},"run[&#x27;end&#x27;].task.data"),". If the ","'","end","'"," step has not yet\nexecuted, returns None."),(0,r.kt)("h2",{id:"returns-50"},"Returns"),(0,r.kt)("p",null,"MetaflowData\nContainer of all artifacts produced by this task"),(0,r.kt)("h4",{id:"successful-1"},"successful"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | successful()\n")),(0,r.kt)("p",null,"Indicates whether or not the run completed successfully."),(0,r.kt)("p",null,"A run is successful if its ","'","end","'"," step is successful."),(0,r.kt)("h2",{id:"returns-51"},"Returns"),(0,r.kt)("p",null,"bool\nTrue if the run completed successfully and False otherwise"),(0,r.kt)("h4",{id:"finished-1"},"finished"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | finished()\n")),(0,r.kt)("p",null,"Indicates whether or not the run completed."),(0,r.kt)("p",null,"A run completed if its ","'","end","'"," step completed."),(0,r.kt)("h2",{id:"returns-52"},"Returns"),(0,r.kt)("p",null,"bool\nTrue if the run completed and False otherwise"),(0,r.kt)("h4",{id:"finished_at-3"},"finished","_","at"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | finished_at()\n")),(0,r.kt)("p",null,"Returns the datetime object of when the run finished (successfully or not)."),(0,r.kt)("p",null,"The completion time of a run is the same as the completion time of its ","'","end","'"," step.\nIf the ","'","end","'"," step has not completed, returns None."),(0,r.kt)("h2",{id:"returns-53"},"Returns"),(0,r.kt)("p",null,"datetime\nDatetime of when the run finished"),(0,r.kt)("h4",{id:"end_task"},"end","_","task"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | end_task()\n")),(0,r.kt)("p",null,"Returns the Task corresponding to the ","'","end","'"," step."),(0,r.kt)("p",null,"This returns None if the end step does not yet exist."),(0,r.kt)("h2",{id:"returns-54"},"Returns"),(0,r.kt)("p",null,"Task\nThe ","'","end","'"," task"),(0,r.kt)("h2",{id:"flow-objects"},"Flow Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Flow(MetaflowObject)\n")),(0,r.kt)("p",null,"A Flow represents all existing flows with a certain name, in other words,\nclasses derived from ","'","FlowSpec","'"),(0,r.kt)("p",null,"As such, it contains all Runs (executions of a flow) related to this flow."),(0,r.kt)("h2",{id:"attributes-7"},"Attributes"),(0,r.kt)("p",null,"latest_run : Run\nLatest Run (in progress or completed, successfully or not) of this Flow\nlatest_successful_run : Run\nLatest successfully completed Run of this Flow"),(0,r.kt)("h4",{id:"latest_run"},"latest","_","run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | latest_run()\n")),(0,r.kt)("p",null,"Returns the latest run (either in progress or completed) of this flow."),(0,r.kt)("p",null,"Note that an in-progress run may be returned by this call. Use latest_successful_run\nto get an object representing a completed successful run."),(0,r.kt)("h2",{id:"returns-55"},"Returns"),(0,r.kt)("p",null,"Run\nLatest run of this flow"),(0,r.kt)("h4",{id:"latest_successful_run"},"latest","_","successful","_","run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | @property\n | latest_successful_run()\n")),(0,r.kt)("p",null,"Returns the latest successful run of this flow."),(0,r.kt)("h2",{id:"returns-56"},"Returns"),(0,r.kt)("p",null,"Run\nLatest successful run of this flow"),(0,r.kt)("h4",{id:"runs"},"runs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"}," | runs(*tags)\n")),(0,r.kt)("p",null,"Returns an iterator over all the runs in the flow."),(0,r.kt)("p",null,"An optional filter is available that allows you to filter on tags.\nIf tags are specified, only runs associated with all specified tags\nare returned."),(0,r.kt)("h2",{id:"parameters-8"},"Parameters"),(0,r.kt)("p",null,"tags : string\nTags to match"),(0,r.kt)("h2",{id:"returns-57"},"Returns"),(0,r.kt)("p",null,"Iterator","[Run]","\nIterator over Run objects in this flow"))}p.isMDXComponent=!0}}]);