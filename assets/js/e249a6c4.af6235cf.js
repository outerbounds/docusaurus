"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5862],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return b}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),d=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=d(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(r),b=n,f=p["".concat(i,".").concat(b)]||p[b]||c[b]||o;return r?a.createElement(f,s(s({ref:t},u),{},{components:r})):a.createElement(f,s({ref:t},u))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var d=2;d<o;d++)s[d]=r[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2545:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return d},toc:function(){return u},default:function(){return p}});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),s=["components"],l={sidebar_label:"content_addressed_store",title:"datastore.content_addressed_store"},i=void 0,d={unversionedId:"api/metaflow/datastore/content_addressed_store",id:"api/metaflow/datastore/content_addressed_store",title:"datastore.content_addressed_store",description:"ContentAddressedStore Objects",source:"@site/docs/api/metaflow/datastore/content_addressed_store.md",sourceDirName:"api/metaflow/datastore",slug:"/api/metaflow/datastore/content_addressed_store",permalink:"/docusaurus/docs/api/metaflow/datastore/content_addressed_store",editUrl:"https://github.dev/outerbounds/docusaurus/blob/main/docs/api/metaflow/datastore/content_addressed_store.md",tags:[],version:"current",frontMatter:{sidebar_label:"content_addressed_store",title:"datastore.content_addressed_store"},sidebar:"apiMetaflow",previous:{title:"filecache",permalink:"/docusaurus/docs/api/metaflow/client/filecache"},next:{title:"datastore_storage",permalink:"/docusaurus/docs/api/metaflow/datastore/datastore_storage"}},u=[{value:"ContentAddressedStore Objects",id:"contentaddressedstore-objects",children:[{value:"__init__",id:"__init__",children:[],level:4}],level:2},{value:"Parameters",id:"parameters",children:[{value:"save_blobs",id:"save_blobs",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-1",children:[],level:2},{value:"Returns",id:"returns",children:[{value:"load_blobs",id:"load_blobs",children:[],level:4}],level:2},{value:"Parameters",id:"parameters-2",children:[],level:2},{value:"Returns",id:"returns-1",children:[],level:2}],c={toc:u};function p(e){var t=e.components,r=(0,n.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"contentaddressedstore-objects"},"ContentAddressedStore Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class ContentAddressedStore(object)\n")),(0,o.kt)("p",null,"This class is not meant to be overridden and is meant to be common across\ndifferent datastores."),(0,o.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(prefix, storage_impl)\n")),(0,o.kt)("p",null,"Initialize a ContentAddressedStore"),(0,o.kt)("p",null,"A content-addressed store stores data using a name/key that is a hash\nof the content. This means that duplicate content is only stored once."),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("p",null,"prefix : string\nPrefix that will be prepended when storing a file\nstorage_impl : type\nImplementation for the backing storage implementation to use"),(0,o.kt)("h4",{id:"save_blobs"},"save","_","blobs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def save_blobs(blob_iter, raw=False, len_hint=0)\n")),(0,o.kt)("p",null,"Saves blobs of data to the datastore"),(0,o.kt)("p",null,"The blobs of data are saved as is if raw is True. If raw is False, the\ndatastore may process the blobs and they should then only be loaded\nusing load_blob"),(0,o.kt)("p",null,"NOTE: The idea here is that there are two modes to access the file once\nit is saved to the datastore:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"if raw is True, you would be able to access it directly using the\nURI returned; the bytes that are passed in as ","'","blob","'"," would be\nreturned directly by reading the object at that URI. You would also\nbe able to access it using load_blob passing the key returned"),(0,o.kt)("li",{parentName:"ul"},"if raw is False, no URI would be returned (the URI would be None)\nand you would only be able to access the object using load_blob."),(0,o.kt)("li",{parentName:"ul"},"The API also specifically takes a list to allow for parallel writes\nif available in the datastore. We could also make a single\nsave_blob","'"," API and save_blobs but this seems superfluous")),(0,o.kt)("h2",{id:"parameters-1"},"Parameters"),(0,o.kt)("p",null,"blob_iter : Iterator over bytes objects to save\nraw : bool, optional\nWhether to save the bytes directly or process them, by default False\nlen_hint : Hint of the number of blobs that will be produced by the\niterator, by default 0"),(0,o.kt)("h2",{id:"returns"},"Returns"),(0,o.kt)("p",null,"List of save_blobs_result:\nThe list order is the same as the blobs passed in. The URI will be\nNone if raw is False."),(0,o.kt)("h4",{id:"load_blobs"},"load","_","blobs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def load_blobs(keys, force_raw=False)\n")),(0,o.kt)("p",null,"Mirror function of save_blobs"),(0,o.kt)("p",null,"This function is guaranteed to return the bytes passed to save_blob for\nthe keys"),(0,o.kt)("h2",{id:"parameters-2"},"Parameters"),(0,o.kt)("p",null,"keys : List of string\nKey describing the object to load\nforce_raw : bool, optional\nSupport for backward compatibility with previous datastores. If\nTrue, this will force the key to be loaded as is (raw). By default,\nFalse"),(0,o.kt)("h2",{id:"returns-1"},"Returns"),(0,o.kt)("p",null,"Returns an iterator of (string, bytes) tuples; the iterator may return keys\nin a different order than were passed in."))}p.isMDXComponent=!0}}]);