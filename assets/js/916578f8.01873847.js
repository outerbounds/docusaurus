"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7415],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return h}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),u=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=u(r),h=n,d=m["".concat(c,".").concat(h)]||m[h]||p[h]||o;return r?a.createElement(d,s(s({ref:t},l),{},{components:r})):a.createElement(d,s({ref:t},l))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var u=2;u<o;u++)s[u]=r[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3280:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return m}});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),s=["components"],i={sidebar_label:"batch_decorator",title:"plugins.aws.batch.batch_decorator"},c=void 0,u={unversionedId:"api/metaflow/plugins/aws/batch/batch_decorator",id:"api/metaflow/plugins/aws/batch/batch_decorator",title:"plugins.aws.batch.batch_decorator",description:"BatchDecorator Objects",source:"@site/docs/api/metaflow/plugins/aws/batch/batch_decorator.md",sourceDirName:"api/metaflow/plugins/aws/batch",slug:"/api/metaflow/plugins/aws/batch/batch_decorator",permalink:"/docusaurus/docs/api/metaflow/plugins/aws/batch/batch_decorator",editUrl:"https://github.com/outerbounds/docusaurus/tree/main/docs/api/metaflow/plugins/aws/batch/batch_decorator.md",tags:[],version:"current",frontMatter:{sidebar_label:"batch_decorator",title:"plugins.aws.batch.batch_decorator"},sidebar:"apiMetaflow",previous:{title:"metadata",permalink:"/docusaurus/docs/api/metaflow/metadata/"},next:{title:"kubernetes",permalink:"/docusaurus/docs/api/metaflow/plugins/aws/eks/kubernetes"}},l=[{value:"BatchDecorator Objects",id:"batchdecorator-objects",children:[],level:2},{value:"Parameters",id:"parameters",children:[],level:2}],p={toc:l};function m(e){var t=e.components,r=(0,n.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"batchdecorator-objects"},"BatchDecorator Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class BatchDecorator(StepDecorator)\n")),(0,o.kt)("p",null,"Step decorator to specify that this step should execute on AWS Batch."),(0,o.kt)("p",null,"This decorator indicates that your step should execute on AWS Batch. Note\nthat you can apply this decorator automatically to all steps using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"--with batch")," argument when calling run/resume. Step level decorators\nwithin the code are overrides and will force a step to execute on AWS Batch\nregardless of the ",(0,o.kt)("inlineCode",{parentName:"p"},"--with")," specification."),(0,o.kt)("p",null,"To use, annotate your step as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"@batch\n@step\ndef my_step(self):\n    ...\n")),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("p",null,"cpu : int\nNumber of CPUs required for this step. Defaults to 1. If @resources is\nalso present, the maximum value from all decorators is used\ngpu : int\nNumber of GPUs required for this step. Defaults to 0. If @resources is\nalso present, the maximum value from all decorators is used\nmemory : int\nMemory size (in MB) required for this step. Defaults to 4096. If\n@resources is also present, the maximum value from all decorators is\nused\nimage : string\nDocker image to use when launching on AWS Batch. If not specified, a\ndefault docker image mapping to the current version of Python is used\nqueue : string\nAWS Batch Job Queue to submit the job to. Defaults to the one\nspecified by the environment variable METAFLOW_BATCH_JOB_QUEUE\niam_role : string\nAWS IAM role that AWS Batch container uses to access AWS cloud resources\n(Amazon S3, Amazon DynamoDb, etc). Defaults to the one specified by the\nenvironment variable METAFLOW_ECS_S3_ACCESS_IAM_ROLE\nexecution_role : string\nAWS IAM role that AWS Batch can use to trigger AWS Fargate tasks.\nDefaults to the one determined by the environment variable\nMETAFLOW_ECS_FARGATE_EXECUTION_ROLE ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html"},"https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html"),"\nshared_memory : int\nThe value for the size (in MiB) of the /dev/shm volume for this step.\nThis parameter maps to the --shm-size option to docker run.\nmax_swap : int\nThe total amount of swap memory (in MiB) a container can use for this\nstep. This parameter is translated to the --memory-swap option to\ndocker run where the value is the sum of the container memory plus the\nmax_swap value.\nswappiness : int\nThis allows you to tune memory swappiness behavior for this step.\nA swappiness value of 0 causes swapping not to happen unless absolutely\nnecessary. A swappiness value of 100 causes pages to be swapped very\naggressively. Accepted values are whole numbers between 0 and 100."))}m.isMDXComponent=!0}}]);