"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3989],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),m=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(n),d=a,f=u["".concat(c,".").concat(d)]||u[d]||s[d]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7536:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return p},default:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_label:"metaflow_environment",title:"metaflow_environment"},c=void 0,m={unversionedId:"api/metaflow/metaflow_environment",id:"api/metaflow/metaflow_environment",title:"metaflow_environment",description:"MetaflowEnvironment Objects",source:"@site/docs/api/metaflow/metaflow_environment.md",sourceDirName:"api/metaflow",slug:"/api/metaflow/metaflow_environment",permalink:"/docs/api/metaflow/metaflow_environment",editUrl:"https://github.com/outerbounds/docusaurus/tree/main/docs/api/metaflow/metaflow_environment.md",tags:[],version:"current",frontMatter:{sidebar_label:"metaflow_environment",title:"metaflow_environment"},sidebar:"apiMetaflow",previous:{title:"includefile",permalink:"/docs/api/metaflow/includefile"},next:{title:"metaflow_version",permalink:"/docs/api/metaflow/metaflow_version"}},p=[{value:"MetaflowEnvironment Objects",id:"metaflowenvironment-objects",children:[{value:"init_environment",id:"init_environment",children:[],level:4},{value:"validate_environment",id:"validate_environment",children:[],level:4},{value:"decospecs",id:"decospecs",children:[],level:4},{value:"bootstrap_commands",id:"bootstrap_commands",children:[],level:4},{value:"add_to_package",id:"add_to_package",children:[],level:4},{value:"pylint_config",id:"pylint_config",children:[],level:4},{value:"get_client_info",id:"get_client_info",children:[],level:4}],level:2},{value:"Parameters",id:"parameters",children:[],level:2},{value:"Returns",id:"returns",children:[],level:2}],s={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"metaflowenvironment-objects"},"MetaflowEnvironment Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class MetaflowEnvironment(object)\n")),(0,o.kt)("h4",{id:"init_environment"},"init","_","environment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | init_environment(echo)\n")),(0,o.kt)("p",null,"Run before any step decorators are initialized."),(0,o.kt)("h4",{id:"validate_environment"},"validate","_","environment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | validate_environment(echo)\n")),(0,o.kt)("p",null,"Run before any command to validate that we are operating in\na desired environment."),(0,o.kt)("h4",{id:"decospecs"},"decospecs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | decospecs()\n")),(0,o.kt)("p",null,"Environment may insert decorators, equivalent to setting --with\noptions on the command line."),(0,o.kt)("h4",{id:"bootstrap_commands"},"bootstrap","_","commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | bootstrap_commands(step_name)\n")),(0,o.kt)("p",null,"A list of shell commands to bootstrap this environment in a remote runtime."),(0,o.kt)("h4",{id:"add_to_package"},"add","_","to","_","package"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | add_to_package()\n")),(0,o.kt)("p",null,"A list of tuples (file, arcname) to add to the job package.\n",(0,o.kt)("inlineCode",{parentName:"p"},"arcname")," is an alternative name for the file in the job package."),(0,o.kt)("h4",{id:"pylint_config"},"pylint","_","config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | pylint_config()\n")),(0,o.kt)("p",null,"Environment may override pylint config."),(0,o.kt)("h4",{id:"get_client_info"},"get","_","client","_","info"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | @classmethod\n | get_client_info(cls, flow_name, metadata)\n")),(0,o.kt)("p",null,"Environment may customize the information returned to the client about the environment"),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("p",null,"flow_name : str\nName of the flow\nmetadata : dict\nMetadata information regarding the task"),(0,o.kt)("h2",{id:"returns"},"Returns"),(0,o.kt)("p",null,"str : Information printed and returned to the user"))}u.isMDXComponent=!0}}]);