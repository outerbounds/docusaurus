"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7339],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),f=p(n),d=a,m=f["".concat(s,".").concat(d)]||f[d]||u[d]||i;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},599:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return f}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={},s="Episode 1: Playlist",p={unversionedId:"r/getting-started/tutorials/season-1-the-local-experience/episode01",id:"r/getting-started/tutorials/season-1-the-local-experience/episode01",title:"Episode 1: Playlist",description:"This flow loads a movie metadata CSV file and builds a playlist for your favorite movie genre. Everything in Metaflow is versioned, so you can run it multiple times and view all the historical playlists with the Metaflow client in an R Markdown Notebook.",source:"@site/docs/r/getting-started/tutorials/season-1-the-local-experience/episode01.md",sourceDirName:"r/getting-started/tutorials/season-1-the-local-experience",slug:"/r/getting-started/tutorials/season-1-the-local-experience/episode01",permalink:"/docs/r/getting-started/tutorials/season-1-the-local-experience/episode01",editUrl:"https://github.com/outerbounds/docusaurus/tree/main/docs/r/getting-started/tutorials/season-1-the-local-experience/episode01.md",tags:[],version:"current",frontMatter:{},sidebar:"r",previous:{title:"Episode 0: Hello World",permalink:"/docs/r/getting-started/tutorials/season-1-the-local-experience/episode00"},next:{title:"Episode 2: Statistics",permalink:"/docs/r/getting-started/tutorials/season-1-the-local-experience/episode02"}},c=[{value:"Showcasing:",id:"showcasing",children:[],level:2},{value:"To play this episode:",id:"to-play-this-episode",children:[],level:2},{value:"Dataset and flow script",id:"dataset-and-flow-script",children:[],level:2}],u={toc:c};function f(e){var t=e.components,o=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"episode-1-playlist"},"Episode 1: Playlist"),(0,i.kt)("p",null,"This flow loads a movie metadata CSV file and builds a playlist for your favorite movie genre. Everything in Metaflow is versioned, so you can run it multiple times and view all the historical playlists with the Metaflow client in an R Markdown Notebook."),(0,i.kt)("h2",{id:"showcasing"},"Showcasing:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Basic ",(0,i.kt)("a",{parentName:"li",href:"../../../metaflow/basics#how-to-define-parameters-for-flows"},"Metaflow Parameters"),"."),(0,i.kt)("li",{parentName:"ul"},"Running workflow ",(0,i.kt)("a",{parentName:"li",href:"../../../metaflow/basics#branch"},"branches")," in parallel and joining results."),(0,i.kt)("li",{parentName:"ul"},"Using the ",(0,i.kt)("a",{parentName:"li",href:"../../../metaflow/client"},"Metaflow client")," in an R Markdown Notebook.")),(0,i.kt)("h2",{id:"to-play-this-episode"},"To play this episode:"),(0,i.kt)("p",null,"If you haven't yet pulled the tutorials to your current working directory, you can follow the instructions ",(0,i.kt)("a",{parentName:"p",href:"../#pull-tutorials"},"here"),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"cd tutorials/01-playlist")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Rscript playlist.R show")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Rscript playlist.R run")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Rscript playlist.R run --genre comedy")),(0,i.kt)("li",{parentName:"ol"},"Open ",(0,i.kt)("inlineCode",{parentName:"li"},"playlist.Rmd")," in RStudio.")),(0,i.kt)("h2",{id:"dataset-and-flow-script"},"Dataset and flow script"),(0,i.kt)("p",null,"The dataset ",(0,i.kt)("inlineCode",{parentName:"p"},"movies.csv")," looks like this"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"movie_title"),(0,i.kt)("th",{parentName:"tr",align:"left"},"title_year"),(0,i.kt)("th",{parentName:"tr",align:"left"},"genre"),(0,i.kt)("th",{parentName:"tr",align:"left"},"gross"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Avatar"),(0,i.kt)("td",{parentName:"tr",align:"left"},"2009"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Sci-Fi"),(0,i.kt)("td",{parentName:"tr",align:"left"},"760505847")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Pirates of the Caribbean: At World's End"),(0,i.kt)("td",{parentName:"tr",align:"left"},"2007"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Fantasy"),(0,i.kt)("td",{parentName:"tr",align:"left"},"309404152")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Spectre"),(0,i.kt)("td",{parentName:"tr",align:"left"},"2015"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Thriller"),(0,i.kt)("td",{parentName:"tr",align:"left"},"200074175")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"..."),(0,i.kt)("td",{parentName:"tr",align:"left"},"..."),(0,i.kt)("td",{parentName:"tr",align:"left"},"..."),(0,i.kt)("td",{parentName:"tr",align:"left"},"...")))),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(7734).Z,width:"1482",height:"572"})),(0,i.kt)("p",null,"The flow script below performs the following steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Ingests a CSV file containing metadata about movies."),(0,i.kt)("li",{parentName:"ol"},"In parallel branches:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Filters movies by the genre parameter."),(0,i.kt)("li",{parentName:"ul"},"Choose a random movie from a different genre."))),(0,i.kt)("li",{parentName:"ol"},"Displays the top entries from the playlist.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-r"},'library(metaflow)\n\n# Parse the CSV file\nstart <- function(self){\n    self$df <- read.csv("./movies.csv", stringsAsFactors=FALSE)\n}\n\n# Filter the movies by genre.\npick_movie <- function(self){\n    # select rows which has the specified genre\n    movie_by_genre <- self$df[self$df$genre == self$genre, ]\n\n    # randomize the title names\n    shuffled_rows <- sample(nrow(movie_by_genre))\n    self$movies <- movie_by_genre[shuffled_rows, ]\n}\n\n# This step chooses a random movie from a different genre.\nbonus_movie <- function(self){\n    # select all movies not matching the specified genre\n    bonus_movies <- self$df[self$df$genre != self$genre, ]\n\n    idx <- sample(nrow(bonus_movies), size=1)\n    self$bonus <- bonus_movies$movie_title[idx]\n}\n\n#  Join our parallel branches and merge results.\njoin <- function(self, inputs){\n    # Reassign relevant variables from our branches.\n    self$bonus <- inputs$bonus_movie$bonus\n    self$playlist <- inputs$pick_movie$movies\n}\n\n# Print out the playlist and bonus movie.\nend <- function(self){\n    message("Playlist for movies in genre: ", self$genre)\n    for (i in 1:nrow(self$playlist)){\n        message(sprintf("Pick %d: %s", i, self$playlist$title[i]))\n\n        if (i > self$top_k) break;\n    }\n}\n\nmetaflow("PlayListFlow") %>%\n    parameter("genre",\n              help = "Filter movies for a particular genre.",\n              default = "Sci-Fi") %>%\n    parameter("top_k",\n              help = "The number of movies to recommend in the playlist.",\n              default = 5,\n              type = "int") %>%\n    step(step = "start",\n         r_function = start,\n         next_step = c("pick_movie", "bonus_movie")) %>%\n    step(step = "pick_movie",\n         r_function = pick_movie,\n         next_step = "join") %>%\n    step(step = "bonus_movie",\n         r_function = bonus_movie,\n         next_step = "join") %>%\n    step(step = "join",\n         r_function = join,\n         join = TRUE,\n         next_step = "end") %>%\n    step(step = "end",\n         r_function = end) %>%\n    run()\n')))}f.isMDXComponent=!0},7734:function(e,t,n){t.Z=n.p+"assets/images/tutorial-episode-1-ac57119ee0fd8900c802d6e21f82953d.png"}}]);