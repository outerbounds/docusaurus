"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9938],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return h}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(a),h=r,m=d["".concat(i,".").concat(h)]||d[h]||u[h]||o;return a?n.createElement(m,l(l({ref:t},c),{},{components:a})):n.createElement(m,l({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6069:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),l=["components"],s={sidebar_label:"decorators",title:"decorators"},i=void 0,p={unversionedId:"api/metaflow/decorators",id:"api/metaflow/decorators",title:"decorators",description:"Decorator Objects",source:"@site/docs/api/metaflow/decorators.md",sourceDirName:"api/metaflow",slug:"/api/metaflow/decorators",permalink:"/docusaurus/docs/api/metaflow/decorators",editUrl:"https://github.com/outerbounds/docusaurus/tree/main/docs/api/metaflow/decorators.md",tags:[],version:"current",frontMatter:{sidebar_label:"decorators",title:"decorators"},sidebar:"apiMetaflow",previous:{title:"timeout_decorator",permalink:"/docusaurus/docs/api/metaflow/plugins/timeout_decorator"},next:{title:"flowspec",permalink:"/docusaurus/docs/api/metaflow/flowspec"}},c=[{value:"Decorator Objects",id:"decorator-objects",children:[],level:2},{value:"FlowDecorator Objects",id:"flowdecorator-objects",children:[{value:"flow_init",id:"flow_init",children:[],level:4},{value:"get_top_level_options",id:"get_top_level_options",children:[],level:4}],level:2},{value:"StepDecorator Objects",id:"stepdecorator-objects",children:[{value:"step_init",id:"step_init",children:[],level:4},{value:"package_init",id:"package_init",children:[],level:4},{value:"add_to_package",id:"add_to_package",children:[],level:4},{value:"step_task_retry_count",id:"step_task_retry_count",children:[],level:4},{value:"runtime_init",id:"runtime_init",children:[],level:4},{value:"runtime_task_created",id:"runtime_task_created",children:[],level:4},{value:"runtime_finished",id:"runtime_finished",children:[],level:4},{value:"runtime_step_cli",id:"runtime_step_cli",children:[],level:4},{value:"task_pre_step",id:"task_pre_step",children:[],level:4},{value:"task_post_step",id:"task_post_step",children:[],level:4},{value:"task_exception",id:"task_exception",children:[],level:4},{value:"task_finished",id:"task_finished",children:[],level:4},{value:"step",id:"step",children:[],level:4}],level:2}],u={toc:c};function d(e){var t=e.components,a=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"decorator-objects"},"Decorator Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Decorator(object)\n")),(0,o.kt)("p",null,"Base class for all decorators."),(0,o.kt)("h2",{id:"flowdecorator-objects"},"FlowDecorator Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class FlowDecorator(Decorator)\n")),(0,o.kt)("h4",{id:"flow_init"},"flow","_","init"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | flow_init(flow, graph, environment, flow_datastore, metadata, logger, echo, options)\n")),(0,o.kt)("p",null,"Called when all decorators have been created for this flow."),(0,o.kt)("h4",{id:"get_top_level_options"},"get","_","top","_","level","_","options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | get_top_level_options()\n")),(0,o.kt)("p",null,"Return a list of option-value pairs that correspond to top-level\noptions that should be passed to subprocesses (tasks). The option\nnames should be a subset of the keys in self.options."),(0,o.kt)("p",null,"If the decorator has a non-empty set of options in self.options, you\nprobably want to return the assigned values in this method."),(0,o.kt)("h2",{id:"stepdecorator-objects"},"StepDecorator Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class StepDecorator(Decorator)\n")),(0,o.kt)("p",null,"Base class for all step decorators."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example"),":"),(0,o.kt)("p",null,"  @my_decorator\n@step\ndef a(self):\npass"),(0,o.kt)("p",null,"  @my_decorator\n@step\ndef b(self):\npass"),(0,o.kt)("p",null,"  To make the above work, define a subclass"),(0,o.kt)("p",null,"  class MyDecorator(StepDecorator):\nname = ",'"',"my_decorator",'"'),(0,o.kt)("p",null,"  and include it in plugins.STEP_DECORATORS. Now both a() and b()\nget an instance of MyDecorator, so you can keep step-specific\nstate easily."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"TODO")," ",(0,o.kt)("em",{parentName:"li"},"savin")," - Initialize the decorators with flow, graph,\nstep.",(0,o.kt)("strong",{parentName:"li"},"name")," etc., so that we don","'","t have to\npass them around with every lifecycle call.")),(0,o.kt)("h4",{id:"step_init"},"step","_","init"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | step_init(flow, graph, step_name, decorators, environment, flow_datastore, logger)\n")),(0,o.kt)("p",null,"Called when all decorators have been created for this step"),(0,o.kt)("h4",{id:"package_init"},"package","_","init"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | package_init(flow, step_name, environment)\n")),(0,o.kt)("p",null,"Called to determine package components"),(0,o.kt)("h4",{id:"add_to_package"},"add","_","to","_","package"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | add_to_package()\n")),(0,o.kt)("p",null,"Called to add custom packages needed for a decorator. This hook will be\ncalled in the ",(0,o.kt)("inlineCode",{parentName:"p"},"MetaflowPackage")," class where metaflow compiles the code package\ntarball. This hook is invoked in the ",(0,o.kt)("inlineCode",{parentName:"p"},"MetaflowPackage"),"'","s ",(0,o.kt)("inlineCode",{parentName:"p"},"path_tuples"),"\nfunction. The ",(0,o.kt)("inlineCode",{parentName:"p"},"path_tuples")," function is a generator that yields a tuple of\n",(0,o.kt)("inlineCode",{parentName:"p"},"(file_path, arcname)"),".",(0,o.kt)("inlineCode",{parentName:"p"},"file_path")," is the path of the file in the local file system;\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"arcname")," is the path of the file in the constructed tarball or the path of the file\nafter decompressing the tarball."),(0,o.kt)("p",null,"Returns a list of tuples where each tuple represents (file_path, arcname)"),(0,o.kt)("h4",{id:"step_task_retry_count"},"step","_","task","_","retry","_","count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | step_task_retry_count()\n")),(0,o.kt)("p",null,"Called to determine the number of times this task should be retried.\nReturns a tuple of (user_code_retries, error_retries). Error retries\nare attempts to run the process after the user code has failed all\nits retries."),(0,o.kt)("p",null,"Typically, the runtime takes the maximum of retry counts across\ndecorators and user specification to determine the task retry count.\nIf you want to force no retries, return the special values (None, None)."),(0,o.kt)("h4",{id:"runtime_init"},"runtime","_","init"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | runtime_init(flow, graph, package, run_id)\n")),(0,o.kt)("p",null,"Top-level initialization before anything gets run in the runtime\ncontext."),(0,o.kt)("h4",{id:"runtime_task_created"},"runtime","_","task","_","created"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | runtime_task_created(task_datastore, task_id, split_index, input_paths, is_cloned, ubf_context)\n")),(0,o.kt)("p",null,"Called when the runtime has created a task related to this step."),(0,o.kt)("h4",{id:"runtime_finished"},"runtime","_","finished"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | runtime_finished(exception)\n")),(0,o.kt)("p",null,"Called when the runtime created task finishes or encounters an interrupt/exception."),(0,o.kt)("h4",{id:"runtime_step_cli"},"runtime","_","step","_","cli"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | runtime_step_cli(cli_args, retry_count, max_user_code_retries, ubf_context)\n")),(0,o.kt)("p",null,"Access the command line for a step execution in the runtime context."),(0,o.kt)("h4",{id:"task_pre_step"},"task","_","pre","_","step"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | task_pre_step(step_name, task_datastore, metadata, run_id, task_id, flow, graph, retry_count, max_user_code_retries, ubf_context, inputs)\n")),(0,o.kt)("p",null,"Run before the step function in the task context."),(0,o.kt)("h4",{id:"task_post_step"},"task","_","post","_","step"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | task_post_step(step_name, flow, graph, retry_count, max_user_code_retries)\n")),(0,o.kt)("p",null,"Run after the step function has finished successfully in the task\ncontext."),(0,o.kt)("h4",{id:"task_exception"},"task","_","exception"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | task_exception(exception, step_name, flow, graph, retry_count, max_user_code_retries)\n")),(0,o.kt)("p",null,"Run if the step function raised an exception in the task context."),(0,o.kt)("p",null,"If this method returns True, it is assumed that the exception has\nbeen taken care of and the flow may continue."),(0,o.kt)("h4",{id:"task_finished"},"task","_","finished"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"}," | task_finished(step_name, flow, graph, is_task_ok, retry_count, max_user_code_retries)\n")),(0,o.kt)("p",null,"Run after the task context has been finalized."),(0,o.kt)("p",null,"is_task_ok is set to False if the user code raised an exception that\nwas not handled by any decorator."),(0,o.kt)("p",null,"Note that you can","'","t create or modify data artifacts in this method\nsince the task has been finalized by the time this method\nis called. Also note that the task may fail after this method has been\ncalled, so this method may get called multiple times for a task over\nmultiple attempts, similar to all task_ methods."),(0,o.kt)("h4",{id:"step"},"step"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"step(f)\n")),(0,o.kt)("p",null,"The step decorator. Makes a method a step in the workflow."))}d.isMDXComponent=!0}}]);