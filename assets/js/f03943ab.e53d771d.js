"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3335],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(n),f=i,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||s;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5780:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var r=n(7462),i=n(3366),s=(n(7294),n(3905)),o=["components"],a={},l="Episode 3: Playlist Redux",c={unversionedId:"r/getting-started/tutorials/season-1-the-local-experience/episode03",id:"r/getting-started/tutorials/season-1-the-local-experience/episode03",title:"Episode 3: Playlist Redux",description:"Use Metaflow to load the statistics generated from Episode 2 Is this Data Science and recommend movies from a genre with highest median gross box office",source:"@site/docs/r/getting-started/tutorials/season-1-the-local-experience/episode03.md",sourceDirName:"r/getting-started/tutorials/season-1-the-local-experience",slug:"/r/getting-started/tutorials/season-1-the-local-experience/episode03",permalink:"/docs/r/getting-started/tutorials/season-1-the-local-experience/episode03",editUrl:"https://github.com/outerbounds/docusaurus/tree/main/docs/r/getting-started/tutorials/season-1-the-local-experience/episode03.md",tags:[],version:"current",frontMatter:{},sidebar:"r",previous:{title:"Episode 2: Statistics",permalink:"/docs/r/getting-started/tutorials/season-1-the-local-experience/episode02"},next:{title:"Season 2: Scaling Out and Up",permalink:"/docs/r/getting-started/tutorials/season-2-scaling-out-and-up/"}},p=[{value:"Showcasing:",id:"showcasing",children:[],level:2},{value:"Before playing this episode:",id:"before-playing-this-episode",children:[],level:2},{value:"To play this episode:",id:"to-play-this-episode",children:[],level:2}],d={toc:p};function u(e){var t=e.components,a=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"episode-3-playlist-redux"},"Episode 3: Playlist Redux"),(0,s.kt)("p",null,"Use Metaflow to load the statistics generated from ",(0,s.kt)("a",{parentName:"p",href:"/docs/r/getting-started/tutorials/season-1-the-local-experience/episode02"},(0,s.kt)("strong",{parentName:"a"},"Episode 2 Is this Data Science"))," and recommend movies from a genre with highest median gross box office"),(0,s.kt)("h2",{id:"showcasing"},"Showcasing:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Using data artifacts generated from other flows.")),(0,s.kt)("h2",{id:"before-playing-this-episode"},"Before playing this episode:"),(0,s.kt)("p",null,"Run 'Episode 02-statistics: Is this Data Science?'"),(0,s.kt)("h2",{id:"to-play-this-episode"},"To play this episode:"),(0,s.kt)("p",null,"If you haven't yet pulled the tutorials to your current working directory, you can follow the instructions ",(0,s.kt)("a",{parentName:"p",href:"../#pull-tutorials"},"here"),"."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"cd tutorials/03-playlist-redux")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"Rscript playlist.R show")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"Rscript playlist.R run"))),(0,s.kt)("p",null,(0,s.kt)("img",{src:n(305).Z,width:"1156",height:"234"})),(0,s.kt)("p",null,"In this ",(0,s.kt)("inlineCode",{parentName:"p"},"PlayListReduxFlow"),", we reuse the genre median gross box office statistics computed from ",(0,s.kt)("inlineCode",{parentName:"p"},"MoviesStatsFlow"),", pick the genre with the highest median gross box office, and create a randomized playlist of movies of this picked genre."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-r"},'library(metaflow)\n\n#  Use the Metaflow client to retrieve the latest successful run from our\n#  MovieStatsFlow and assign them as data artifacts in this flow.\nstart <- function(self){\n    # Loads the movie data into a data frame\n    self$df <- read.csv("./movies.csv", stringsAsFactors=FALSE)\n\n    message("Using metadata provider: ", get_metadata())\n\n    flow <- flow_client$new("MovieStatsFlow")\n    run <- run_client$new(flow, flow$latest_successful_run)\n    message("Using analysis from: ", run$pathspec)\n\n    self$genre_stats <- run$artifact("stats")\n}\n\n# Pick some movies from the genre with highest median gross box office\n# which we calculated in MovieStatsFlow\npick_movie <- function(self){\n    sort_order <- order(self$genre_stats$median, decreasing=TRUE)\n    sorted_stats <- self$genre_stats[sort_order, ]\n\n    self$picked_genre <- sorted_stats$genres[1]\n\n    message("Picked genre: ", self$picked_genre, " with the highest median gross box office.")\n\n    # generate a randomized playlist of titles of the picked genre\n    movie_by_genre <- self$df[self$df$genre == self$picked_genre, ]\n    shuffled_rows <- sample(nrow(movie_by_genre))\n    self$playlist <- movie_by_genre[shuffled_rows, ]\n}\n\n# Print out the picked movies\nend <- function(self){\n    message("Playlist for movies in picked genre: ", self$picked_genre)\n    for (i in 1:nrow(self$playlist)){\n        message(sprintf("Pick %d: %s", i, self$playlist$movie_title[i]))\n\n        if (i >= self$top_k) break;\n    }\n}\n\nmetaflow("PlayListReduxFlow") %>%\n    parameter("top_k",\n              help = "The number of movies to recommend in the playlist.",\n              default = 5,\n              type = "int") %>%\n    step(step = "start",\n         r_function = start,\n         next_step = "pick_movie") %>%\n    step(step = "pick_movie",\n         r_function = pick_movie,\n         next_step = "end") %>%\n    step(step = "end",\n         r_function = end) %>%\n    run()\n')))}u.isMDXComponent=!0},305:function(e,t,n){t.Z=n.p+"assets/images/tutorial-episode-3-aad8894da9ef32c28ec9ae67a39d90c1.png"}}]);