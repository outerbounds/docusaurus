"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2348],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||l;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1426:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return c}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),i=["components"],o={sidebar_label:"renderer",title:"plugins.cards.card_modules.chevron.renderer"},s=void 0,u={unversionedId:"api/metaflow/plugins/cards/card_modules/chevron/renderer",id:"api/metaflow/plugins/cards/card_modules/chevron/renderer",title:"plugins.cards.card_modules.chevron.renderer",description:"render",source:"@site/docs/api/metaflow/plugins/cards/card_modules/chevron/renderer.md",sourceDirName:"api/metaflow/plugins/cards/card_modules/chevron",slug:"/api/metaflow/plugins/cards/card_modules/chevron/renderer",permalink:"/docusaurus/docs/api/metaflow/plugins/cards/card_modules/chevron/renderer",editUrl:"https://github.dev/outerbounds/docusaurus/blob/main/docs/api/metaflow/plugins/cards/card_modules/chevron/renderer.md",tags:[],version:"current",frontMatter:{sidebar_label:"renderer",title:"plugins.cards.card_modules.chevron.renderer"},sidebar:"apiMetaflow",previous:{title:"main",permalink:"/docusaurus/docs/api/metaflow/plugins/cards/card_modules/chevron/main"},next:{title:"tokenizer",permalink:"/docusaurus/docs/api/metaflow/plugins/cards/card_modules/chevron/tokenizer"}},p=[{value:"render",id:"render",children:[],level:4}],d={toc:p};function c(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"render"},"render"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'render(template="", data={}, partials_path=".", partials_ext="mustache", partials_dict={}, padding="", def_ldel="{{", def_rdel="}}", scopes=None, warn=False, keep=False)\n')),(0,l.kt)("p",null,"Render a mustache template."),(0,l.kt)("p",null,"Renders a mustache template with a data scope and partial capability.\nGiven the file structure...\n\u2577\n\u251c\u2500\u257c main.py\n\u251c\u2500\u257c main.ms\n\u2514\u2500\u252e partials\n\u2514\u2500\u2500 part.ms"),(0,l.kt)("p",null,"then main.py would make the following call:"),(0,l.kt)("p",null,"render(open(","'","main.ms","'",", ","'","r","'","), {...}, ","'","partials","'",", ","'","ms","'",")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"template")," - A file-like object or a string containing the template"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," - A python dictionary with your data scope"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"partials_path")," - The path to where your partials are stored\nIf set to None, then partials won","'","t be loaded from the file system\n(defaults to ","'",".","'",")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"partials_ext")," - The extension that you want the parser to look for\n(defaults to ","'","mustache","'",")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"partials_dict")," - A python dictionary which will be search for partials\nbefore the filesystem is. {","'","include","'",": ","'","foo","'","} is the same\nas a file called include.mustache\n(defaults to {})"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"padding")," - This is for padding partials, and shouldn","'","t be used\n(but can be if you really want to)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"def_ldel")," - The default left delimiter\n(",'"',"{{",'"'," by default, as in spec compliant mustache)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"def_rdel")," - The default right delimiter\n(",'"',"}}",'"'," by default, as in spec compliant mustache)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"scopes")," - The list of scopes that get_key will look through"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"warn")," - Issue a warning to stderr when a template substitution isn","'","t found in the data"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"keep")," - Keep unreplaced tags when a template substitution isn","'","t found in the data")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  A string containing the rendered template."))}c.isMDXComponent=!0}}]);